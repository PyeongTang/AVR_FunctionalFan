
solution_FunctionalFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000018d8  0000196c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800106  00800106  00001972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f0  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044a6  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018bc  00000000  00000000  0000647a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a81  00000000  00000000  00007d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cac  00000000  00000000  0000a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013c7  00000000  00000000  0000b464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002979  00000000  00000000  0000c82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  0000f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	00 00       	nop
       4:	c2 c3       	rjmp	.+1924   	; 0x78a <__vector_1>
       6:	00 00       	nop
       8:	83 c3       	rjmp	.+1798   	; 0x710 <__vector_2>
       a:	00 00       	nop
       c:	44 c3       	rjmp	.+1672   	; 0x696 <__vector_3>
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c4       	rjmp	.+2170   	; 0x8a0 <__vector_9>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	12 c4       	rjmp	.+2084   	; 0x852 <__vector_11>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c3       	rjmp	.+1664   	; 0x6c2 <__vector_16>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c9 c3       	rjmp	.+1938   	; 0x804 <__vector_28>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	14 06       	cpc	r1, r20
      8e:	17 06       	cpc	r1, r23
      90:	1b 06       	cpc	r1, r27
      92:	1f 06       	cpc	r1, r31
      94:	23 06       	cpc	r2, r19
      96:	27 06       	cpc	r2, r23
      98:	2b 06       	cpc	r2, r27
      9a:	2f 06       	cpc	r2, r31
      9c:	9c 06       	cpc	r9, r28
      9e:	a1 06       	cpc	r10, r17
      a0:	a7 06       	cpc	r10, r23
      a2:	ad 06       	cpc	r10, r29
      a4:	b3 06       	cpc	r11, r19
      a6:	b9 06       	cpc	r11, r25
      a8:	c0 06       	cpc	r12, r16
      aa:	c7 06       	cpc	r12, r23
      ac:	ce 06       	cpc	r12, r30
      ae:	d4 06       	cpc	r13, r20
      b0:	db 06       	cpc	r13, r27
      b2:	e2 06       	cpc	r14, r18
      b4:	e9 06       	cpc	r14, r25
      b6:	fc 06       	cpc	r15, r28
      b8:	ef 06       	cpc	r14, r31
      ba:	f6 06       	cpc	r15, r22
      bc:	4e 07       	cpc	r20, r30
      be:	51 07       	cpc	r21, r17
      c0:	55 07       	cpc	r21, r21
      c2:	59 07       	cpc	r21, r25
      c4:	5d 07       	cpc	r21, r29
      c6:	61 07       	cpc	r22, r17
      c8:	65 07       	cpc	r22, r21
      ca:	69 07       	cpc	r22, r25
      cc:	f9 07       	cpc	r31, r25
      ce:	fc 07       	cpc	r31, r28
      d0:	00 08       	sbc	r0, r0
      d2:	04 08       	sbc	r0, r4
      d4:	08 08       	sbc	r0, r8
      d6:	0c 08       	sbc	r0, r12
      d8:	10 08       	sbc	r1, r0
      da:	14 08       	sbc	r1, r4
      dc:	63 08       	sbc	r6, r3
      de:	6c 08       	sbc	r6, r12
      e0:	76 08       	sbc	r7, r6
      e2:	80 08       	sbc	r8, r0
      e4:	8a 08       	sbc	r8, r10
      e6:	94 08       	sbc	r9, r4
      e8:	9f 08       	sbc	r9, r15
      ea:	aa 08       	sbc	r10, r10
      ec:	b5 08       	sbc	r11, r5
      ee:	bf 08       	sbc	r11, r15
      f0:	ca 08       	sbc	r12, r10
      f2:	d5 08       	sbc	r13, r5
      f4:	e0 08       	sbc	r14, r0
      f6:	ff 08       	sbc	r15, r15
      f8:	ea 08       	sbc	r14, r10
      fa:	f5 08       	sbc	r15, r5
      fc:	59 09       	sbc	r21, r9
      fe:	5e 09       	sbc	r21, r14
     100:	64 09       	sbc	r22, r4
     102:	6a 09       	sbc	r22, r10
     104:	70 09       	sbc	r23, r0
     106:	76 09       	sbc	r23, r6
     108:	7c 09       	sbc	r23, r12
     10a:	82 09       	sbc	r24, r2

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d0 e1       	ldi	r29, 0x10	; 16
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	11 e0       	ldi	r17, 0x01	; 1
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	e8 ed       	ldi	r30, 0xD8	; 216
     120:	f8 e1       	ldi	r31, 0x18	; 24
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0b bf       	out	0x3b, r16	; 59
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
     128:	07 90       	elpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a6 30       	cpi	r26, 0x06	; 6
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	a6 e0       	ldi	r26, 0x06	; 6
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	aa 36       	cpi	r26, 0x6A	; 106
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	d5 d3       	rcall	.+1962   	; 0x8ee <main>
     144:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <BTN_init>:
// 	Pushed
	else {
		btn->btnStatus = 1;
		return 1;
	}
}
     14a:	fc 01       	movw	r30, r24
     14c:	60 83       	st	Z, r22
     14e:	11 82       	std	Z+1, r1	; 0x01
     150:	91 b3       	in	r25, 0x11	; 17
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	a9 01       	movw	r20, r18
     158:	02 c0       	rjmp	.+4      	; 0x15e <BTN_init+0x14>
     15a:	44 0f       	add	r20, r20
     15c:	55 1f       	adc	r21, r21
     15e:	6a 95       	dec	r22
     160:	e2 f7       	brpl	.-8      	; 0x15a <BTN_init+0x10>
     162:	84 2f       	mov	r24, r20
     164:	80 95       	com	r24
     166:	89 23       	and	r24, r25
     168:	81 bb       	out	0x11, r24	; 17
     16a:	82 b3       	in	r24, 0x12	; 18
     16c:	00 80       	ld	r0, Z
     16e:	02 c0       	rjmp	.+4      	; 0x174 <BTN_init+0x2a>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <BTN_init+0x26>
     178:	28 2b       	or	r18, r24
     17a:	22 bb       	out	0x12, r18	; 18
     17c:	08 95       	ret

0000017e <BTN_enableInterrupt>:

void BTN_enableInterrupt(BTN* btn){
	switch (btn->btnNum) {
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	69 f0       	breq	.+26     	; 0x1a0 <BTN_enableInterrupt+0x22>
     186:	18 f0       	brcs	.+6      	; 0x18e <BTN_enableInterrupt+0x10>
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	99 f0       	breq	.+38     	; 0x1b2 <BTN_enableInterrupt+0x34>
     18c:	1a c0       	rjmp	.+52     	; 0x1c2 <BTN_enableInterrupt+0x44>
		case BTN_0 :
// 			External Interrupt Enable
			EIMSK |= (1 << BTN_0);
     18e:	89 b7       	in	r24, 0x39	; 57
     190:	81 60       	ori	r24, 0x01	; 1
     192:	89 bf       	out	0x39, r24	; 57
// 			External Interrupt Sense Control - Falling Edge
			EICRA |= (1 << ISC01) | (0 << ISC00);
     194:	ea e6       	ldi	r30, 0x6A	; 106
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	82 60       	ori	r24, 0x02	; 2
     19c:	80 83       	st	Z, r24
		break;
     19e:	11 c0       	rjmp	.+34     	; 0x1c2 <BTN_enableInterrupt+0x44>
		
		case BTN_1 :
// 			External Interrupt Enable
			EIMSK |= (1 << BTN_1);
     1a0:	89 b7       	in	r24, 0x39	; 57
     1a2:	82 60       	ori	r24, 0x02	; 2
     1a4:	89 bf       	out	0x39, r24	; 57
// 			External Interrupt Sense Control - Falling Edge
			EICRA |= (1 << ISC11) | (0 << ISC10);
     1a6:	ea e6       	ldi	r30, 0x6A	; 106
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	88 60       	ori	r24, 0x08	; 8
     1ae:	80 83       	st	Z, r24
		break;
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <BTN_enableInterrupt+0x44>
		
		case BTN_2 :
// 			External Interrupt Enable
			EIMSK |= (1 << BTN_2);
     1b2:	89 b7       	in	r24, 0x39	; 57
     1b4:	84 60       	ori	r24, 0x04	; 4
     1b6:	89 bf       	out	0x39, r24	; 57
// 			External Interrupt Sense Control - Falling Edge
			EICRA |= (1 << ISC21) | (0 << ISC20);
     1b8:	ea e6       	ldi	r30, 0x6A	; 106
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	80 62       	ori	r24, 0x20	; 32
     1c0:	80 83       	st	Z, r24
		break;
		
		default:break;
	}
	sei();
     1c2:	78 94       	sei
     1c4:	08 95       	ret

000001c6 <FND_init>:
	fnd->status = fnd->decimalPattern[decimalValue % 10];
	FND_PORT = fnd->status;
}

void FND_allOn(FND* fnd){
	FND_PORT = 0xFF;
     1c6:	fc 01       	movw	r30, r24
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	8a bb       	out	0x1a, r24	; 26
     1cc:	12 82       	std	Z+2, r1	; 0x02
     1ce:	1b ba       	out	0x1b, r1	; 27
     1d0:	8f e3       	ldi	r24, 0x3F	; 63
     1d2:	83 83       	std	Z+3, r24	; 0x03
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	84 83       	std	Z+4, r24	; 0x04
     1d8:	8b e5       	ldi	r24, 0x5B	; 91
     1da:	85 83       	std	Z+5, r24	; 0x05
     1dc:	8f e4       	ldi	r24, 0x4F	; 79
     1de:	86 83       	std	Z+6, r24	; 0x06
     1e0:	86 e6       	ldi	r24, 0x66	; 102
     1e2:	87 83       	std	Z+7, r24	; 0x07
     1e4:	8d e6       	ldi	r24, 0x6D	; 109
     1e6:	80 87       	std	Z+8, r24	; 0x08
     1e8:	8d e7       	ldi	r24, 0x7D	; 125
     1ea:	81 87       	std	Z+9, r24	; 0x09
     1ec:	87 e0       	ldi	r24, 0x07	; 7
     1ee:	82 87       	std	Z+10, r24	; 0x0a
     1f0:	8f e7       	ldi	r24, 0x7F	; 127
     1f2:	83 87       	std	Z+11, r24	; 0x0b
     1f4:	87 e6       	ldi	r24, 0x67	; 103
     1f6:	84 87       	std	Z+12, r24	; 0x0c
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0c c0       	rjmp	.+24     	; 0x214 <FND_init+0x4e>
     1fc:	df 01       	movw	r26, r30
     1fe:	a9 0f       	add	r26, r25
     200:	b1 1d       	adc	r27, r1
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	09 2e       	mov	r0, r25
     206:	01 c0       	rjmp	.+2      	; 0x20a <FND_init+0x44>
     208:	22 0f       	add	r18, r18
     20a:	0a 94       	dec	r0
     20c:	ea f7       	brpl	.-6      	; 0x208 <FND_init+0x42>
     20e:	1d 96       	adiw	r26, 0x0d	; 13
     210:	2c 93       	st	X, r18
     212:	9f 5f       	subi	r25, 0xFF	; 255
     214:	96 30       	cpi	r25, 0x06	; 6
     216:	90 f3       	brcs	.-28     	; 0x1fc <FND_init+0x36>
     218:	08 95       	ret

0000021a <FND_setValue>:
     21a:	fc 01       	movw	r30, r24
     21c:	62 83       	std	Z+2, r22	; 0x02
     21e:	6b bb       	out	0x1b, r22	; 27
     220:	08 95       	ret

00000222 <FND_slide>:
     222:	fc 01       	movw	r30, r24
     224:	e6 0f       	add	r30, r22
     226:	f1 1d       	adc	r31, r1
     228:	65 85       	ldd	r22, Z+13	; 0x0d
     22a:	f7 cf       	rjmp	.-18     	; 0x21a <FND_setValue>
     22c:	08 95       	ret

0000022e <FND_middleBar>:
     22e:	60 e4       	ldi	r22, 0x40	; 64
     230:	f4 cf       	rjmp	.-24     	; 0x21a <FND_setValue>
     232:	08 95       	ret

00000234 <FND_allOff>:
}

void FND_allOff(FND* fnd){
	FND_PORT = 0x00;
     234:	1b ba       	out	0x1b, r1	; 27
     236:	08 95       	ret

00000238 <FND4_init>:
		fnd4->digitValue[digit] = 0;
	}
	else{
		fnd4->digitValue[digit] = number;
	}
	FND4_allOn(fnd4);
     238:	fc 01       	movw	r30, r24
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	84 bb       	out	0x14, r24	; 20
     23e:	15 ba       	out	0x15, r1	; 21
     240:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     244:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     248:	10 82       	st	Z, r1
     24a:	11 82       	std	Z+1, r1	; 0x01
     24c:	12 82       	std	Z+2, r1	; 0x02
     24e:	13 82       	std	Z+3, r1	; 0x03
     250:	15 82       	std	Z+5, r1	; 0x05
     252:	14 82       	std	Z+4, r1	; 0x04
     254:	8f e3       	ldi	r24, 0x3F	; 63
     256:	86 83       	std	Z+6, r24	; 0x06
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	87 83       	std	Z+7, r24	; 0x07
     25c:	8b e5       	ldi	r24, 0x5B	; 91
     25e:	80 87       	std	Z+8, r24	; 0x08
     260:	8f e4       	ldi	r24, 0x4F	; 79
     262:	81 87       	std	Z+9, r24	; 0x09
     264:	86 e6       	ldi	r24, 0x66	; 102
     266:	82 87       	std	Z+10, r24	; 0x0a
     268:	8d e6       	ldi	r24, 0x6D	; 109
     26a:	83 87       	std	Z+11, r24	; 0x0b
     26c:	8d e7       	ldi	r24, 0x7D	; 125
     26e:	84 87       	std	Z+12, r24	; 0x0c
     270:	87 e0       	ldi	r24, 0x07	; 7
     272:	85 87       	std	Z+13, r24	; 0x0d
     274:	8f e7       	ldi	r24, 0x7F	; 127
     276:	86 87       	std	Z+14, r24	; 0x0e
     278:	87 e6       	ldi	r24, 0x67	; 103
     27a:	87 87       	std	Z+15, r24	; 0x0f
     27c:	08 95       	ret

0000027e <FND4_on>:
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     284:	e5 e6       	ldi	r30, 0x65	; 101
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	20 83       	st	Z, r18
     28a:	40 81       	ld	r20, Z
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	06 2e       	mov	r0, r22
     292:	02 c0       	rjmp	.+4      	; 0x298 <FND4_on+0x1a>
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <FND4_on+0x16>
     29c:	20 95       	com	r18
     29e:	24 23       	and	r18, r20
     2a0:	20 83       	st	Z, r18
     2a2:	fc 01       	movw	r30, r24
     2a4:	e6 0f       	add	r30, r22
     2a6:	f1 1d       	adc	r31, r1
     2a8:	20 81       	ld	r18, Z
     2aa:	fc 01       	movw	r30, r24
     2ac:	e2 0f       	add	r30, r18
     2ae:	f1 1d       	adc	r31, r1
     2b0:	86 81       	ldd	r24, Z+6	; 0x06
     2b2:	85 bb       	out	0x15, r24	; 21
     2b4:	08 95       	ret

000002b6 <FND4_allOff>:
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     2bc:	08 95       	ret

000002be <FND4_allOn>:
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	8c 01       	movw	r16, r24
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	0a c0       	rjmp	.+20     	; 0x2de <FND4_allOn+0x20>
     2ca:	6c 2f       	mov	r22, r28
     2cc:	c8 01       	movw	r24, r16
     2ce:	d7 df       	rcall	.-82     	; 0x27e <FND4_on>
     2d0:	8f e9       	ldi	r24, 0x9F	; 159
     2d2:	9f e0       	ldi	r25, 0x0F	; 15
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <FND4_allOn+0x16>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <FND4_allOn+0x1c>
     2da:	00 00       	nop
     2dc:	cf 5f       	subi	r28, 0xFF	; 255
     2de:	c4 30       	cpi	r28, 0x04	; 4
     2e0:	a0 f3       	brcs	.-24     	; 0x2ca <FND4_allOn+0xc>
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	08 95       	ret

000002ea <FND4_setValue>:
}

void FND4_setValue(FND4* fnd4, uint16_t decimalValue){
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	ab 01       	movw	r20, r22
	fnd4->decimalValue = decimalValue;
     2f2:	7d 83       	std	Y+5, r23	; 0x05
     2f4:	6c 83       	std	Y+4, r22	; 0x04
	fnd4->digitValue[0] = (decimalValue / 1000)	% 10;
     2f6:	9b 01       	movw	r18, r22
     2f8:	36 95       	lsr	r19
     2fa:	27 95       	ror	r18
     2fc:	36 95       	lsr	r19
     2fe:	27 95       	ror	r18
     300:	36 95       	lsr	r19
     302:	27 95       	ror	r18
     304:	a5 ec       	ldi	r26, 0xC5	; 197
     306:	b0 e2       	ldi	r27, 0x20	; 32
     308:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     30c:	fc 01       	movw	r30, r24
     30e:	f2 95       	swap	r31
     310:	e2 95       	swap	r30
     312:	ef 70       	andi	r30, 0x0F	; 15
     314:	ef 27       	eor	r30, r31
     316:	ff 70       	andi	r31, 0x0F	; 15
     318:	ef 27       	eor	r30, r31
     31a:	9f 01       	movw	r18, r30
     31c:	ad ec       	ldi	r26, 0xCD	; 205
     31e:	bc ec       	ldi	r27, 0xCC	; 204
     320:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	9c 01       	movw	r18, r24
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	82 0f       	add	r24, r18
     344:	93 1f       	adc	r25, r19
     346:	9f 01       	movw	r18, r30
     348:	28 1b       	sub	r18, r24
     34a:	39 0b       	sbc	r19, r25
     34c:	28 83       	st	Y, r18
	fnd4->digitValue[1] = (decimalValue / 100)	% 10;
     34e:	9a 01       	movw	r18, r20
     350:	36 95       	lsr	r19
     352:	27 95       	ror	r18
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	ab e7       	ldi	r26, 0x7B	; 123
     35a:	b4 e1       	ldi	r27, 0x14	; 20
     35c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     360:	fc 01       	movw	r30, r24
     362:	f6 95       	lsr	r31
     364:	e7 95       	ror	r30
     366:	9f 01       	movw	r18, r30
     368:	ad ec       	ldi	r26, 0xCD	; 205
     36a:	bc ec       	ldi	r27, 0xCC	; 204
     36c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     370:	96 95       	lsr	r25
     372:	87 95       	ror	r24
     374:	96 95       	lsr	r25
     376:	87 95       	ror	r24
     378:	96 95       	lsr	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	82 0f       	add	r24, r18
     390:	93 1f       	adc	r25, r19
     392:	9f 01       	movw	r18, r30
     394:	28 1b       	sub	r18, r24
     396:	39 0b       	sbc	r19, r25
     398:	29 83       	std	Y+1, r18	; 0x01
	fnd4->digitValue[2] = (decimalValue / 10)	% 10;
     39a:	9a 01       	movw	r18, r20
     39c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     3a0:	fc 01       	movw	r30, r24
     3a2:	f6 95       	lsr	r31
     3a4:	e7 95       	ror	r30
     3a6:	f6 95       	lsr	r31
     3a8:	e7 95       	ror	r30
     3aa:	f6 95       	lsr	r31
     3ac:	e7 95       	ror	r30
     3ae:	9f 01       	movw	r18, r30
     3b0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__umulhisi3>
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	96 95       	lsr	r25
     3ba:	87 95       	ror	r24
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	9c 01       	movw	r18, r24
     3c2:	22 0f       	add	r18, r18
     3c4:	33 1f       	adc	r19, r19
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	82 0f       	add	r24, r18
     3d4:	93 1f       	adc	r25, r19
     3d6:	9f 01       	movw	r18, r30
     3d8:	28 1b       	sub	r18, r24
     3da:	39 0b       	sbc	r19, r25
     3dc:	2a 83       	std	Y+2, r18	; 0x02
	fnd4->digitValue[3] = (decimalValue / 1)	% 10;
     3de:	cf 01       	movw	r24, r30
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e8 0f       	add	r30, r24
     3f2:	f9 1f       	adc	r31, r25
     3f4:	4e 1b       	sub	r20, r30
     3f6:	5f 0b       	sbc	r21, r31
     3f8:	4b 83       	std	Y+3, r20	; 0x03
	FND4_allOn(fnd4);
     3fa:	ce 01       	movw	r24, r28
     3fc:	60 df       	rcall	.-320    	; 0x2be <FND4_allOn>
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <FFF_init>:
 */ 

#include "functionalFan_Fan.h"

void FFF_init(){
	fff_fanState = FAN_STATE_NOSET;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <fff_fanState>
	Pfnd = &(fnd);
     40a:	8b e1       	ldi	r24, 0x1B	; 27
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Pfnd+0x1>
     412:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Pfnd>
	fff_fanDuty = 0x00;
     416:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <fff_fanDuty>
	fff_fndSlideCount = 0;
     41a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <fff_fndSlideCount+0x1>
     41e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <fff_fndSlideCount>
	fff_fndSlideThreshold = 0;
     422:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <fff_fndSlideThreshold+0x1>
     426:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <fff_fndSlideThreshold>
	fff_fndSlideSelect = 0;
     42a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <fff_fndSlideSelect>
	PWM_init(TIMER_2, 'a', 1);
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	61 e6       	ldi	r22, 0x61	; 97
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	92 d2       	rcall	.+1316   	; 0x95c <PWM_init>
	TIMER2_enableOutputCompareInterrupt();
     438:	02 d6       	rcall	.+3076   	; 0x103e <TIMER2_enableOutputCompareInterrupt>
     43a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
	FND_init(Pfnd);
     43e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
     442:	c1 de       	rcall	.-638    	; 0x1c6 <FND_init>
     444:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
	FND_allOff(Pfnd);
     448:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
     44c:	f3 ce       	rjmp	.-538    	; 0x234 <FND_allOff>
     44e:	08 95       	ret

00000450 <FFF_setDuty>:
     450:	48 2f       	mov	r20, r24
};

void FFF_setDuty(uint8_t duty){
	PWM_setDuty(TIMER_2, 'a', duty);
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	61 e6       	ldi	r22, 0x61	; 97
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	fd c2       	rjmp	.+1530   	; 0xa54 <PWM_setDuty>
     45a:	08 95       	ret

0000045c <FFF_setState>:
}

// BTN1 (INT1)
void FFF_setState(uint8_t state){
	fff_fanState = state;
     45c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <fff_fanState>
     460:	08 95       	ret

00000462 <FFF_getState>:
}

uint8_t FFF_getState (){
	return fff_fanState;
}
     462:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <fff_fanState>
     466:	08 95       	ret

00000468 <FFF_Execute>:

// while(1)
void FFF_Execute(bool systemOff){
	// 	Reset (TimeOut or ButtonActivated)
	if (systemOff) {
     468:	88 23       	and	r24, r24
     46a:	71 f0       	breq	.+28     	; 0x488 <FFF_Execute+0x20>
		fff_fanState			=	FAN_STATE_NOSET;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <fff_fanState>
		fff_fanDuty				=	FAN_DUTY_NOSET;
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fff_fanDuty>
		FFF_setDuty(fff_fanDuty);
     478:	eb df       	rcall	.-42     	; 0x450 <FFF_setDuty>
		FND_middleBar(Pfnd);
     47a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
     47e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
		TIMER2_disableOutputCompareInterrupt();
     482:	d5 de       	rcall	.-598    	; 0x22e <FND_middleBar>
     484:	e0 c5       	rjmp	.+3008   	; 0x1046 <TIMER2_disableOutputCompareInterrupt>
     486:	08 95       	ret
	}
	// 	Determine Duty for Fan, DC Motor
	else {
		if		(fff_fanState == FAN_STATE_NOSET) {
     488:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <fff_fanState>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	59 f4       	brne	.+22     	; 0x4a6 <FFF_Execute+0x3e>
			fff_fanDuty = FAN_DUTY_NOSET;
     490:	80 e1       	ldi	r24, 0x10	; 16
     492:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fff_fanDuty>
			FFF_setDuty(fff_fanDuty);
     496:	dc df       	rcall	.-72     	; 0x450 <FFF_setDuty>
			FND_middleBar(Pfnd);
     498:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
     49c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
			TIMER2_disableOutputCompareInterrupt();
     4a0:	c6 de       	rcall	.-628    	; 0x22e <FND_middleBar>
     4a2:	d1 c5       	rjmp	.+2978   	; 0x1046 <TIMER2_disableOutputCompareInterrupt>
		}
		else if (fff_fanState == FAN_STATE_MODE_1) {
     4a4:	08 95       	ret
			fff_fanDuty = FAN_DUTY_MODE_1;
     4a6:	82 30       	cpi	r24, 0x02	; 2
     4a8:	31 f4       	brne	.+12     	; 0x4b6 <FFF_Execute+0x4e>
     4aa:	8a ea       	ldi	r24, 0xAA	; 170
			FFF_setDuty(fff_fanDuty);
     4ac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fff_fanDuty>
			TIMER2_enableOutputCompareInterrupt();
     4b0:	cf df       	rcall	.-98     	; 0x450 <FFF_setDuty>
		}
		else if (fff_fanState == FAN_STATE_MODE_2) {
     4b2:	c5 c5       	rjmp	.+2954   	; 0x103e <TIMER2_enableOutputCompareInterrupt>
     4b4:	08 95       	ret
			fff_fanDuty = FAN_DUTY_MODE_2;
     4b6:	84 30       	cpi	r24, 0x04	; 4
     4b8:	31 f4       	brne	.+12     	; 0x4c6 <FFF_Execute+0x5e>
     4ba:	84 ed       	ldi	r24, 0xD4	; 212
			FFF_setDuty(fff_fanDuty);
     4bc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fff_fanDuty>
			TIMER2_enableOutputCompareInterrupt();
     4c0:	c7 df       	rcall	.-114    	; 0x450 <FFF_setDuty>
     4c2:	bd c5       	rjmp	.+2938   	; 0x103e <TIMER2_enableOutputCompareInterrupt>
		}
		else if (fff_fanState == FAN_STATE_MODE_3) {
     4c4:	08 95       	ret
     4c6:	88 30       	cpi	r24, 0x08	; 8
			fff_fanDuty = FAN_DUTY_MODE_3;
     4c8:	29 f4       	brne	.+10     	; 0x4d4 <FFF_Execute+0x6c>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fff_fanDuty>
			FFF_setDuty(fff_fanDuty);
     4d0:	bf df       	rcall	.-130    	; 0x450 <FFF_setDuty>
			TIMER2_enableOutputCompareInterrupt();
     4d2:	b5 c5       	rjmp	.+2922   	; 0x103e <TIMER2_enableOutputCompareInterrupt>
     4d4:	08 95       	ret

000004d6 <FFF_ISR_OC>:
     4d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <fff_fanState>
	
}

// TIMER2_OC_vect
void FFF_ISR_OC(){
	switch (fff_fanState){
     4da:	84 30       	cpi	r24, 0x04	; 4
     4dc:	59 f0       	breq	.+22     	; 0x4f4 <FFF_ISR_OC+0x1e>
     4de:	88 30       	cpi	r24, 0x08	; 8
     4e0:	81 f0       	breq	.+32     	; 0x502 <FFF_ISR_OC+0x2c>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	a1 f4       	brne	.+40     	; 0x50e <FFF_ISR_OC+0x38>
		case FAN_STATE_NOSET  : break;
		
		case FAN_STATE_MODE_1 :
			fff_fndSlideThreshold = FAN_POWER_FND_SLIDE_TH_MODE_1;
     4e6:	20 e3       	ldi	r18, 0x30	; 48
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <fff_fndSlideThreshold+0x1>
     4ee:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <fff_fndSlideThreshold>
		break;
     4f2:	0d c0       	rjmp	.+26     	; 0x50e <FFF_ISR_OC+0x38>
		
		case FAN_STATE_MODE_2 :
			fff_fndSlideThreshold = FAN_POWER_FND_SLIDE_TH_MODE_2;
     4f4:	2c e1       	ldi	r18, 0x1C	; 28
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <fff_fndSlideThreshold+0x1>
     4fc:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <fff_fndSlideThreshold>
		break;
     500:	06 c0       	rjmp	.+12     	; 0x50e <FFF_ISR_OC+0x38>
		
		case FAN_STATE_MODE_3 :
			fff_fndSlideThreshold = FAN_POWER_FND_SLIDE_TH_MODE_3;
     502:	2c e0       	ldi	r18, 0x0C	; 12
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <fff_fndSlideThreshold+0x1>
     50a:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <fff_fndSlideThreshold>
		break;
	}
	if (fff_fanState != FAN_STATE_NOSET){
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	31 f1       	breq	.+76     	; 0x55e <FFF_ISR_OC+0x88>
		fff_fndSlideCount++;
     512:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <fff_fndSlideCount>
     516:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <fff_fndSlideCount+0x1>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <fff_fndSlideCount+0x1>
     520:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <fff_fndSlideCount>
		if (fff_fndSlideCount >= fff_fndSlideThreshold){
     524:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <fff_fndSlideThreshold>
     528:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <fff_fndSlideThreshold+0x1>
     52c:	82 17       	cp	r24, r18
     52e:	93 07       	cpc	r25, r19
     530:	d8 f0       	brcs	.+54     	; 0x568 <FFF_ISR_OC+0x92>
			fff_fndSlideCount = 0;
     532:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <fff_fndSlideCount+0x1>
     536:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <fff_fndSlideCount>
			if (fff_fndSlideSelect >= 5){
     53a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <fff_fndSlideSelect>
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	18 f0       	brcs	.+6      	; 0x548 <FFF_ISR_OC+0x72>
				fff_fndSlideSelect = 0;
     542:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <fff_fndSlideSelect>
     546:	03 c0       	rjmp	.+6      	; 0x54e <FFF_ISR_OC+0x78>
			}
			else {
				fff_fndSlideSelect++;
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <fff_fndSlideSelect>
			}
			FND_slide(Pfnd, fff_fndSlideSelect);
     54e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <fff_fndSlideSelect>
     552:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
     556:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
     55a:	63 ce       	rjmp	.-826    	; 0x222 <FND_slide>
     55c:	08 95       	ret
		}
	}
	else {
		FND_middleBar(Pfnd);
     55e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Pfnd>
     562:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Pfnd+0x1>
     566:	63 ce       	rjmp	.-826    	; 0x22e <FND_middleBar>
     568:	08 95       	ret

0000056a <FFT_ISR>:
 *  Author: Lee JaePyeong
 */ 

#include "functionalFan_Timer.h"

void FFT_ISR (){
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
	TIMER0_ISR_OVF_tick1ms();
     56e:	fb d2       	rcall	.+1526   	; 0xb66 <TIMER0_ISR_OVF_tick1ms>
	if (~fft_timeOver){
		fft_timerTickValue = fft_timerThreshold - TIMER0_seconds();
     570:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <fft_timerThreshold>
     574:	d0 91 42 01 	lds	r29, 0x0142	; 0x800142 <fft_timerThreshold+0x1>
     578:	ae d3       	rcall	.+1884   	; 0xcd6 <TIMER0_seconds>
     57a:	c8 1b       	sub	r28, r24
     57c:	d9 0b       	sbc	r29, r25
     57e:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <fft_timerTickValue+0x1>
     582:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <fft_timerTickValue>
		if (fft_timerTickValue <= 0) {
     586:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <fft_timerTickValue>
     58a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <fft_timerTickValue+0x1>
     58e:	89 2b       	or	r24, r25
     590:	19 f4       	brne	.+6      	; 0x598 <FFT_ISR+0x2e>
			fft_timeOver = true;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <fft_timeOver>
		}
	}
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <FFT_init>:

void FFT_init (){
	fft_timerState		=	TIMER_STATE_NOSET;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <fft_timerState>
	fft_timeOver		=	false;
     5a4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <fft_timeOver>
	fft_timerTickValue  =	0;
     5a8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <fft_timerTickValue+0x1>
     5ac:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fft_timerTickValue>
	fft_timerThreshold	=	0;
     5b0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fft_timerThreshold+0x1>
     5b4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <fft_timerThreshold>
	TIMER0_init();
     5b8:	69 d3       	rcall	.+1746   	; 0xc8c <TIMER0_init>
	Pfnd4 = &(fnd4);
     5ba:	81 e3       	ldi	r24, 0x31	; 49
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <Pfnd4+0x1>
     5c2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Pfnd4>
	FND4_init(Pfnd4);
     5c6:	38 de       	rcall	.-912    	; 0x238 <FND4_init>
	FND4_allOff(Pfnd4);
     5c8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Pfnd4>
     5cc:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Pfnd4+0x1>
     5d0:	72 ce       	rjmp	.-796    	; 0x2b6 <FND4_allOff>
     5d2:	08 95       	ret

000005d4 <FFT_setState>:
}

void FFT_setState (uint8_t state){
     5d4:	cf 93       	push	r28
     5d6:	c8 2f       	mov	r28, r24
	TIMER0_disableOverflowInterrupt();
     5d8:	6a d3       	rcall	.+1748   	; 0xcae <TIMER0_disableOverflowInterrupt>
	fft_timerState		= state;
     5da:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <fft_timerState>
	fft_timeOver		= false;
     5de:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <fft_timeOver>
	fft_timerTickValue  = 0;
     5e2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <fft_timerTickValue+0x1>
     5e6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fft_timerTickValue>
}
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <FFT_getState>:

uint8_t FFT_getState (){
	return fft_timerState;
     5ee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fft_timerState>
}
     5f2:	08 95       	ret

000005f4 <FFT_getTimeValue>:

uint16_t FFT_getTimeValue() {
	return fft_timerTickValue;
     5f4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <fft_timerTickValue>
     5f8:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <fft_timerTickValue+0x1>
}
     5fc:	08 95       	ret

000005fe <FFT_isTimeOver>:

bool FFT_isTimeOver(){
	return fft_timeOver;
}
     5fe:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <fft_timeOver>
     602:	08 95       	ret

00000604 <FFT_Execute>:

void FFT_Execute (bool systemOff){
// 	Reset
	if (systemOff || fft_timeOver) {
     604:	81 11       	cpse	r24, r1
     606:	04 c0       	rjmp	.+8      	; 0x610 <FFT_Execute+0xc>
     608:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <fft_timeOver>
     60c:	88 23       	and	r24, r24
     60e:	61 f0       	breq	.+24     	; 0x628 <FFT_Execute+0x24>
		fft_timerState			=	TIMER_STATE_NOSET;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <fft_timerState>
		fft_timeOver			=	false;
     616:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <fft_timeOver>
		TIMER0_disableOverflowInterrupt();
     61a:	49 d3       	rcall	.+1682   	; 0xcae <TIMER0_disableOverflowInterrupt>
		FND4_allOff(Pfnd4);
     61c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Pfnd4>
     620:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Pfnd4+0x1>
     624:	48 ce       	rjmp	.-880    	; 0x2b6 <FND4_allOff>
     626:	08 95       	ret
	}
// 	Determine Threshold for Timer
	else {
		if		(fft_timerState == TIMER_STATE_NOSET) {
     628:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fft_timerState>
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	41 f4       	brne	.+16     	; 0x640 <FFT_Execute+0x3c>
			fft_timerThreshold	= TIMER_TH_MODE_1;
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <fft_timerThreshold+0x1>
     638:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <fft_timerThreshold>
			TIMER0_disableOverflowInterrupt();
     63c:	38 d3       	rcall	.+1648   	; 0xcae <TIMER0_disableOverflowInterrupt>
     63e:	23 c0       	rjmp	.+70     	; 0x686 <FFT_Execute+0x82>
		}
		else if (fft_timerState == TIMER_STATE_MODE_1) {
     640:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fft_timerState>
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	41 f4       	brne	.+16     	; 0x658 <FFT_Execute+0x54>
			fft_timerThreshold	= TIMER_TH_MODE_1;
     648:	8a e0       	ldi	r24, 0x0A	; 10
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <fft_timerThreshold+0x1>
     650:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <fft_timerThreshold>
			TIMER0_enableOverflowInterrupt();
     654:	0f d3       	rcall	.+1566   	; 0xc74 <TIMER0_enableOverflowInterrupt>
     656:	17 c0       	rjmp	.+46     	; 0x686 <FFT_Execute+0x82>
		}
		else if (fft_timerState == TIMER_STATE_MODE_2) {
     658:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fft_timerState>
     65c:	84 30       	cpi	r24, 0x04	; 4
     65e:	41 f4       	brne	.+16     	; 0x670 <FFT_Execute+0x6c>
			fft_timerThreshold	= TIMER_TH_MODE_2;
     660:	8c e3       	ldi	r24, 0x3C	; 60
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <fft_timerThreshold+0x1>
     668:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <fft_timerThreshold>
			TIMER0_enableOverflowInterrupt();
     66c:	03 d3       	rcall	.+1542   	; 0xc74 <TIMER0_enableOverflowInterrupt>
     66e:	0b c0       	rjmp	.+22     	; 0x686 <FFT_Execute+0x82>
		}
		else if (fft_timerState == TIMER_STATE_MODE_3) {
     670:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fft_timerState>
     674:	88 30       	cpi	r24, 0x08	; 8
     676:	39 f4       	brne	.+14     	; 0x686 <FFT_Execute+0x82>
			fft_timerThreshold	= TIMER_TH_MODE_3;
     678:	88 e5       	ldi	r24, 0x58	; 88
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <fft_timerThreshold+0x1>
			TIMER0_enableOverflowInterrupt();
     680:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <fft_timerThreshold>
		}
		FND4_setValue(Pfnd4, FFT_getTimeValue());
     684:	f7 d2       	rcall	.+1518   	; 0xc74 <TIMER0_enableOverflowInterrupt>
     686:	b6 df       	rcall	.-148    	; 0x5f4 <FFT_getTimeValue>
     688:	bc 01       	movw	r22, r24
     68a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Pfnd4>
     68e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Pfnd4+0x1>
     692:	2b ce       	rjmp	.-938    	; 0x2ea <FND4_setValue>
     694:	08 95       	ret

00000696 <__vector_3>:

BTN		btnSystemControl;
BTN*	PbtnSystemControl	= &(btnSystemControl);

// Button to System Control
ISR (INT2_vect){
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 93       	push	r24
	if (systemDisable) {
     6a2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <systemDisable>
     6a6:	88 23       	and	r24, r24
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <__vector_3+0x1a>
		systemDisable = false;
     6aa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <systemDisable>
     6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <__vector_3+0x20>
	}
	else {
		systemDisable = true;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <systemDisable>
	}
}
     6b6:	8f 91       	pop	r24
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <__vector_16>:

// Timer
ISR (TIMER0_OVF_vect){
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	0b b6       	in	r0, 0x3b	; 59
     6ce:	0f 92       	push	r0
     6d0:	2f 93       	push	r18
     6d2:	3f 93       	push	r19
     6d4:	4f 93       	push	r20
     6d6:	5f 93       	push	r21
     6d8:	6f 93       	push	r22
     6da:	7f 93       	push	r23
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	af 93       	push	r26
     6e2:	bf 93       	push	r27
     6e4:	ef 93       	push	r30
     6e6:	ff 93       	push	r31
	FFT_ISR();
     6e8:	40 df       	rcall	.-384    	; 0x56a <FFT_ISR>
}
     6ea:	ff 91       	pop	r31
     6ec:	ef 91       	pop	r30
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	7f 91       	pop	r23
     6f8:	6f 91       	pop	r22
     6fa:	5f 91       	pop	r21
     6fc:	4f 91       	pop	r20
     6fe:	3f 91       	pop	r19
     700:	2f 91       	pop	r18
     702:	0f 90       	pop	r0
     704:	0b be       	out	0x3b, r0	; 59
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <__vector_2>:

// Button to Timer Control
ISR (INT1_vect){
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	0b b6       	in	r0, 0x3b	; 59
     71c:	0f 92       	push	r0
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
	switch (FFT_getState()) {
     736:	5b df       	rcall	.-330    	; 0x5ee <FFT_getState>
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	61 f0       	breq	.+24     	; 0x754 <__vector_2+0x44>
     73c:	18 f4       	brcc	.+6      	; 0x744 <__vector_2+0x34>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	31 f0       	breq	.+12     	; 0x74e <__vector_2+0x3e>
     742:	10 c0       	rjmp	.+32     	; 0x764 <__vector_2+0x54>
     744:	84 30       	cpi	r24, 0x04	; 4
     746:	49 f0       	breq	.+18     	; 0x75a <__vector_2+0x4a>
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	51 f0       	breq	.+20     	; 0x760 <__vector_2+0x50>
     74c:	0b c0       	rjmp	.+22     	; 0x764 <__vector_2+0x54>
		
		case TIMER_STATE_NOSET :
			FFT_setState(TIMER_STATE_MODE_1);
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	41 df       	rcall	.-382    	; 0x5d4 <FFT_setState>
		break;
		
		case TIMER_STATE_MODE_1 :
			FFT_setState(TIMER_STATE_MODE_2);
     752:	08 c0       	rjmp	.+16     	; 0x764 <__vector_2+0x54>
     754:	84 e0       	ldi	r24, 0x04	; 4
		break;
     756:	3e df       	rcall	.-388    	; 0x5d4 <FFT_setState>
		
		case TIMER_STATE_MODE_2 :
			FFT_setState(TIMER_STATE_MODE_3);
     758:	05 c0       	rjmp	.+10     	; 0x764 <__vector_2+0x54>
     75a:	88 e0       	ldi	r24, 0x08	; 8
		break;
     75c:	3b df       	rcall	.-394    	; 0x5d4 <FFT_setState>
		
		case TIMER_STATE_MODE_3 :
			FFT_setState(TIMER_STATE_NOSET);
     75e:	02 c0       	rjmp	.+4      	; 0x764 <__vector_2+0x54>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	38 df       	rcall	.-400    	; 0x5d4 <FFT_setState>
		break;
		
		default:break;
	}
}
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	bf 91       	pop	r27
     76a:	af 91       	pop	r26
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	7f 91       	pop	r23
     772:	6f 91       	pop	r22
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0b be       	out	0x3b, r0	; 59
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_1>:

// Button to DC Motor Fan Power Control
ISR (INT0_vect){
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	0b b6       	in	r0, 0x3b	; 59
     796:	0f 92       	push	r0
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
	switch (FFF_getState()) {
     7b0:	58 de       	rcall	.-848    	; 0x462 <FFF_getState>
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	61 f0       	breq	.+24     	; 0x7ce <__vector_1+0x44>
     7b6:	18 f4       	brcc	.+6      	; 0x7be <__vector_1+0x34>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	31 f0       	breq	.+12     	; 0x7c8 <__vector_1+0x3e>
     7bc:	10 c0       	rjmp	.+32     	; 0x7de <__vector_1+0x54>
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	49 f0       	breq	.+18     	; 0x7d4 <__vector_1+0x4a>
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	51 f0       	breq	.+20     	; 0x7da <__vector_1+0x50>
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <__vector_1+0x54>
		
		case FAN_STATE_NOSET :
			FFF_setState(FAN_STATE_MODE_1);
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	48 de       	rcall	.-880    	; 0x45c <FFF_setState>
		break;
		
		case FAN_STATE_MODE_1 :
			FFF_setState(FAN_STATE_MODE_2);
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <__vector_1+0x54>
     7ce:	84 e0       	ldi	r24, 0x04	; 4
		break;
     7d0:	45 de       	rcall	.-886    	; 0x45c <FFF_setState>
		
		case FAN_STATE_MODE_2 :
			FFF_setState(FAN_STATE_MODE_3);
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <__vector_1+0x54>
     7d4:	88 e0       	ldi	r24, 0x08	; 8
		break;
     7d6:	42 de       	rcall	.-892    	; 0x45c <FFF_setState>
		
		case FAN_STATE_MODE_3 :
			FFF_setState(FAN_STATE_NOSET);
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <__vector_1+0x54>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	3f de       	rcall	.-898    	; 0x45c <FFF_setState>
		break;
		
		default:break;
	}
}
     7de:	ff 91       	pop	r31
     7e0:	ef 91       	pop	r30
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	7f 91       	pop	r23
     7ec:	6f 91       	pop	r22
     7ee:	5f 91       	pop	r21
     7f0:	4f 91       	pop	r20
     7f2:	3f 91       	pop	r19
     7f4:	2f 91       	pop	r18
     7f6:	0f 90       	pop	r0
     7f8:	0b be       	out	0x3b, r0	; 59
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <__vector_28>:

// Ultradetector
ISR (TIMER3_COMPC_vect){
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	0b b6       	in	r0, 0x3b	; 59
     810:	0f 92       	push	r0
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
	UD_COMP_ISR();
     82a:	e0 d5       	rcall	.+3008   	; 0x13ec <UD_COMP_ISR>
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <__vector_11>:

// Ultrasonic
ISR (TIMER1_CAPT_vect){
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	0b b6       	in	r0, 0x3b	; 59
     85e:	0f 92       	push	r0
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	ULTRA_ISR_CAPT();
     878:	b9 d6       	rcall	.+3442   	; 0x15ec <ULTRA_ISR_CAPT>
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0b be       	out	0x3b, r0	; 59
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_9>:

// Fan (DC Motor)
ISR (TIMER2_COMP_vect){
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	0b b6       	in	r0, 0x3b	; 59
     8ac:	0f 92       	push	r0
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
	FFF_ISR_OC();
     8c6:	07 de       	rcall	.-1010   	; 0x4d6 <FFF_ISR_OC>
}
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0b be       	out	0x3b, r0	; 59
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <main>:

int main(void)
{
	systemDisable = true;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <systemDisable>
	
// 	BUTTON
	BTN_init(PbtnTimerControl,		BTN_0);
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PbtnTimerControl>
     8fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PbtnTimerControl+0x1>
     8fe:	25 dc       	rcall	.-1974   	; 0x14a <BTN_init>
	BTN_enableInterrupt(PbtnTimerControl);
     900:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PbtnTimerControl>
     904:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PbtnTimerControl+0x1>
     908:	3a dc       	rcall	.-1932   	; 0x17e <BTN_enableInterrupt>
	
	BTN_init(PbtnFanControl,		BTN_1);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PbtnFanControl>
     910:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PbtnFanControl+0x1>
     914:	1a dc       	rcall	.-1996   	; 0x14a <BTN_init>
	BTN_enableInterrupt(PbtnFanControl);
     916:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PbtnFanControl>
     91a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PbtnFanControl+0x1>
     91e:	2f dc       	rcall	.-1954   	; 0x17e <BTN_enableInterrupt>
	
	BTN_init(PbtnSystemControl,		BTN_2);
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     926:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     92a:	0f dc       	rcall	.-2018   	; 0x14a <BTN_init>
	BTN_enableInterrupt(PbtnSystemControl);
     92c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     930:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
// 	//////////////////////////////////////////
	
// 	TIMER
	FFT_init();
     934:	24 dc       	rcall	.-1976   	; 0x17e <BTN_enableInterrupt>
// 	//////////////////////////////////////////

//  ULTRADETECTOR
	UD_init();
     936:	33 de       	rcall	.-922    	; 0x59e <FFT_init>
//	///////////////////////////////////////////

//	FAN
	FFF_init();
     938:	93 d5       	rcall	.+2854   	; 0x1460 <UD_init>
//	///////////////////////////////////////////

	while (1) {
		FFT_Execute	(systemDisable);
     93a:	64 dd       	rcall	.-1336   	; 0x404 <FFF_init>
     93c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <systemDisable>
		UD_Execute	(systemDisable);
     940:	61 de       	rcall	.-830    	; 0x604 <FFT_Execute>
     942:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <systemDisable>
     946:	c3 d5       	rcall	.+2950   	; 0x14ce <UD_Execute>
		FFF_Execute	(systemDisable);
     948:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <systemDisable>
     94c:	8d dd       	rcall	.-1254   	; 0x468 <FFF_Execute>
     94e:	57 de       	rcall	.-850    	; 0x5fe <FFT_isTimeOver>
		
		if (~systemDisable && FFT_isTimeOver()){
     950:	88 23       	and	r24, r24
     952:	a1 f3       	breq	.-24     	; 0x93c <main+0x4e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <systemDisable>
			systemDisable = true;
     95a:	f0 cf       	rjmp	.-32     	; 0x93c <main+0x4e>

0000095c <PWM_init>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
//	OC3A	OC3B	OC3C	|
// --------------------------

#include "pwm.h"

void PWM_init (uint8_t timerNum, char channel, uint16_t desiredFreqency){
     960:	ea 01       	movw	r28, r20
	switch (timerNum){
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	59 f0       	breq	.+22     	; 0x97c <PWM_init+0x20>
     966:	38 f0       	brcs	.+14     	; 0x976 <PWM_init+0x1a>
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	09 f4       	brne	.+2      	; 0x96e <PWM_init+0x12>
     96c:	3b c0       	rjmp	.+118    	; 0x9e4 <PWM_init+0x88>
     96e:	83 30       	cpi	r24, 0x03	; 3
     970:	09 f4       	brne	.+2      	; 0x974 <PWM_init+0x18>
     972:	3b c0       	rjmp	.+118    	; 0x9ea <PWM_init+0x8e>
     974:	6c c0       	rjmp	.+216    	; 0xa4e <PWM_init+0xf2>
		case (TIMER_0) :
				TIMER0_init();
     976:	8a d1       	rcall	.+788    	; 0xc8c <TIMER0_init>
				TIMER0_setPwm();
     978:	76 d1       	rcall	.+748    	; 0xc66 <TIMER0_setPwm>
     97a:	69 c0       	rjmp	.+210    	; 0xa4e <PWM_init+0xf2>
		break;
     97c:	63 34       	cpi	r22, 0x43	; 67
			
		case (TIMER_1) :
			switch (channel) {
     97e:	31 f1       	breq	.+76     	; 0x9cc <PWM_init+0x70>
     980:	28 f4       	brcc	.+10     	; 0x98c <PWM_init+0x30>
     982:	61 34       	cpi	r22, 0x41	; 65
     984:	59 f0       	breq	.+22     	; 0x99c <PWM_init+0x40>
     986:	62 34       	cpi	r22, 0x42	; 66
     988:	a9 f0       	breq	.+42     	; 0x9b4 <PWM_init+0x58>
     98a:	61 c0       	rjmp	.+194    	; 0xa4e <PWM_init+0xf2>
     98c:	62 36       	cpi	r22, 0x62	; 98
     98e:	c1 f0       	breq	.+48     	; 0x9c0 <PWM_init+0x64>
     990:	63 36       	cpi	r22, 0x63	; 99
     992:	11 f1       	breq	.+68     	; 0x9d8 <PWM_init+0x7c>
     994:	61 36       	cpi	r22, 0x61	; 97
     996:	09 f0       	breq	.+2      	; 0x99a <PWM_init+0x3e>
     998:	5a c0       	rjmp	.+180    	; 0xa4e <PWM_init+0xf2>
     99a:	06 c0       	rjmp	.+12     	; 0x9a8 <PWM_init+0x4c>
				case ('A') :
					TIMER1_init			(TIMER1_CH_A_PORT);
     99c:	85 e0       	ldi	r24, 0x05	; 5
     99e:	a0 d1       	rcall	.+832    	; 0xce0 <TIMER1_init>
					TIMER1_setPwm		(TIMER1_CH_A, desiredFreqency);
     9a0:	be 01       	movw	r22, r28
     9a2:	81 e4       	ldi	r24, 0x41	; 65
     9a4:	b5 d2       	rcall	.+1386   	; 0xf10 <TIMER1_setPwm>
				break;
     9a6:	53 c0       	rjmp	.+166    	; 0xa4e <PWM_init+0xf2>
				
				case ('a') :
					TIMER1_init			(TIMER1_CH_A_PORT);
     9a8:	85 e0       	ldi	r24, 0x05	; 5
     9aa:	9a d1       	rcall	.+820    	; 0xce0 <TIMER1_init>
					TIMER1_setPwm		(TIMER1_CH_A, desiredFreqency);
     9ac:	be 01       	movw	r22, r28
     9ae:	81 e4       	ldi	r24, 0x41	; 65
     9b0:	af d2       	rcall	.+1374   	; 0xf10 <TIMER1_setPwm>
				break;
     9b2:	4d c0       	rjmp	.+154    	; 0xa4e <PWM_init+0xf2>
				
				case ('B') :
					TIMER1_init			(TIMER1_CH_B_PORT);
     9b4:	86 e0       	ldi	r24, 0x06	; 6
     9b6:	94 d1       	rcall	.+808    	; 0xce0 <TIMER1_init>
					TIMER1_setPwm		(TIMER1_CH_B, desiredFreqency);
     9b8:	be 01       	movw	r22, r28
     9ba:	82 e4       	ldi	r24, 0x42	; 66
     9bc:	a9 d2       	rcall	.+1362   	; 0xf10 <TIMER1_setPwm>
				break;
				
				case ('b') :
					TIMER1_init			(TIMER1_CH_B_PORT);
     9be:	47 c0       	rjmp	.+142    	; 0xa4e <PWM_init+0xf2>
     9c0:	86 e0       	ldi	r24, 0x06	; 6
					TIMER1_setPwm		(TIMER1_CH_B, desiredFreqency);
     9c2:	8e d1       	rcall	.+796    	; 0xce0 <TIMER1_init>
     9c4:	be 01       	movw	r22, r28
     9c6:	82 e4       	ldi	r24, 0x42	; 66
				break;
     9c8:	a3 d2       	rcall	.+1350   	; 0xf10 <TIMER1_setPwm>
				
				case ('C') :
					TIMER1_init			(TIMER1_CH_C_PORT);
     9ca:	41 c0       	rjmp	.+130    	; 0xa4e <PWM_init+0xf2>
     9cc:	87 e0       	ldi	r24, 0x07	; 7
					TIMER1_setPwm		(TIMER1_CH_C, desiredFreqency);
     9ce:	88 d1       	rcall	.+784    	; 0xce0 <TIMER1_init>
     9d0:	be 01       	movw	r22, r28
     9d2:	83 e4       	ldi	r24, 0x43	; 67
				break;
     9d4:	9d d2       	rcall	.+1338   	; 0xf10 <TIMER1_setPwm>
				
				case ('c') :
					TIMER1_init			(TIMER1_CH_C_PORT);
     9d6:	3b c0       	rjmp	.+118    	; 0xa4e <PWM_init+0xf2>
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	82 d1       	rcall	.+772    	; 0xce0 <TIMER1_init>
					TIMER1_setPwm		(TIMER1_CH_C, desiredFreqency);
     9dc:	be 01       	movw	r22, r28
     9de:	83 e4       	ldi	r24, 0x43	; 67
     9e0:	97 d2       	rcall	.+1326   	; 0xf10 <TIMER1_setPwm>
     9e2:	35 c0       	rjmp	.+106    	; 0xa4e <PWM_init+0xf2>
				break;
     9e4:	c0 d2       	rcall	.+1408   	; 0xf66 <TIMER2_init>
			}
		break;
		
		case (TIMER_2) :
			TIMER2_init();
     9e6:	24 d3       	rcall	.+1608   	; 0x1030 <TIMER2_setPwm>
     9e8:	32 c0       	rjmp	.+100    	; 0xa4e <PWM_init+0xf2>
			TIMER2_setPwm();
     9ea:	63 34       	cpi	r22, 0x43	; 67
     9ec:	29 f1       	breq	.+74     	; 0xa38 <PWM_init+0xdc>
		break;
     9ee:	28 f4       	brcc	.+10     	; 0x9fa <PWM_init+0x9e>
		
		case (TIMER_3) :
			switch (channel) {
     9f0:	61 34       	cpi	r22, 0x41	; 65
     9f2:	51 f0       	breq	.+20     	; 0xa08 <PWM_init+0xac>
     9f4:	62 34       	cpi	r22, 0x42	; 66
     9f6:	a1 f0       	breq	.+40     	; 0xa20 <PWM_init+0xc4>
     9f8:	2a c0       	rjmp	.+84     	; 0xa4e <PWM_init+0xf2>
     9fa:	62 36       	cpi	r22, 0x62	; 98
     9fc:	b9 f0       	breq	.+46     	; 0xa2c <PWM_init+0xd0>
     9fe:	63 36       	cpi	r22, 0x63	; 99
     a00:	09 f1       	breq	.+66     	; 0xa44 <PWM_init+0xe8>
     a02:	61 36       	cpi	r22, 0x61	; 97
     a04:	21 f5       	brne	.+72     	; 0xa4e <PWM_init+0xf2>
				case ('A') :
					TIMER3_init			(TIMER3_CH_A_PORT);
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <PWM_init+0xb8>
     a08:	83 e0       	ldi	r24, 0x03	; 3
					TIMER3_setPwm		(TIMER3_CH_A, desiredFreqency);
     a0a:	31 d3       	rcall	.+1634   	; 0x106e <TIMER3_init>
     a0c:	be 01       	movw	r22, r28
     a0e:	81 e4       	ldi	r24, 0x41	; 65
				break;
     a10:	d5 d4       	rcall	.+2474   	; 0x13bc <TIMER3_setPwm>
				
				case ('a') :
					TIMER3_init			(TIMER3_CH_A_PORT);
     a12:	1d c0       	rjmp	.+58     	; 0xa4e <PWM_init+0xf2>
     a14:	83 e0       	ldi	r24, 0x03	; 3
					TIMER3_setPwm		(TIMER3_CH_A, desiredFreqency);
     a16:	2b d3       	rcall	.+1622   	; 0x106e <TIMER3_init>
     a18:	be 01       	movw	r22, r28
     a1a:	81 e4       	ldi	r24, 0x41	; 65
				break;
				
				case ('B') :
					TIMER3_init			(TIMER3_CH_B_PORT);
     a1c:	cf d4       	rcall	.+2462   	; 0x13bc <TIMER3_setPwm>
     a1e:	17 c0       	rjmp	.+46     	; 0xa4e <PWM_init+0xf2>
					TIMER3_setPwm		(TIMER3_CH_B, desiredFreqency);
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	25 d3       	rcall	.+1610   	; 0x106e <TIMER3_init>
     a24:	be 01       	movw	r22, r28
     a26:	82 e4       	ldi	r24, 0x42	; 66
				break;
     a28:	c9 d4       	rcall	.+2450   	; 0x13bc <TIMER3_setPwm>
				
				case ('b') :
					TIMER3_init			(TIMER3_CH_B_PORT);
     a2a:	11 c0       	rjmp	.+34     	; 0xa4e <PWM_init+0xf2>
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	1f d3       	rcall	.+1598   	; 0x106e <TIMER3_init>
					TIMER3_setPwm		(TIMER3_CH_B, desiredFreqency);
     a30:	be 01       	movw	r22, r28
     a32:	82 e4       	ldi	r24, 0x42	; 66
     a34:	c3 d4       	rcall	.+2438   	; 0x13bc <TIMER3_setPwm>
     a36:	0b c0       	rjmp	.+22     	; 0xa4e <PWM_init+0xf2>
				break;
     a38:	85 e0       	ldi	r24, 0x05	; 5
				
				case ('C') :
					TIMER3_init			(TIMER3_CH_C_PORT);
     a3a:	19 d3       	rcall	.+1586   	; 0x106e <TIMER3_init>
     a3c:	be 01       	movw	r22, r28
     a3e:	83 e4       	ldi	r24, 0x43	; 67
					TIMER3_setPwm		(TIMER3_CH_C, desiredFreqency);
     a40:	bd d4       	rcall	.+2426   	; 0x13bc <TIMER3_setPwm>
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <PWM_init+0xf2>
     a44:	85 e0       	ldi	r24, 0x05	; 5
     a46:	13 d3       	rcall	.+1574   	; 0x106e <TIMER3_init>
				break;
     a48:	be 01       	movw	r22, r28
				
				case ('c') :
					TIMER3_init			(TIMER3_CH_C_PORT);
     a4a:	83 e4       	ldi	r24, 0x43	; 67
     a4c:	b7 d4       	rcall	.+2414   	; 0x13bc <TIMER3_setPwm>
     a4e:	df 91       	pop	r29
					TIMER3_setPwm		(TIMER3_CH_C, desiredFreqency);
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <PWM_setDuty>:
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	49 f0       	breq	.+18     	; 0xa6a <PWM_setDuty+0x16>
				break;
			}
		break;
	}
}
     a58:	28 f0       	brcs	.+10     	; 0xa64 <PWM_setDuty+0x10>
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	a1 f1       	breq	.+104    	; 0xac6 <PWM_setDuty+0x72>
void PWM_setDuty (uint8_t timerNum, char channel, uint16_t stepValue){
	switch (timerNum){
     a5e:	83 30       	cpi	r24, 0x03	; 3
     a60:	a9 f1       	breq	.+106    	; 0xacc <PWM_setDuty+0x78>
     a62:	08 95       	ret
		case (TIMER_0) :
			TIMER0_setDuty(stepValue);
     a64:	84 2f       	mov	r24, r20
     a66:	35 c1       	rjmp	.+618    	; 0xcd2 <TIMER0_setDuty>
		break;
     a68:	08 95       	ret
			
		case (TIMER_1) :
			switch (channel) {
     a6a:	63 34       	cpi	r22, 0x43	; 67
     a6c:	11 f1       	breq	.+68     	; 0xab2 <PWM_setDuty+0x5e>
     a6e:	28 f4       	brcc	.+10     	; 0xa7a <PWM_setDuty+0x26>
     a70:	61 34       	cpi	r22, 0x41	; 65
     a72:	59 f0       	breq	.+22     	; 0xa8a <PWM_setDuty+0x36>
     a74:	62 34       	cpi	r22, 0x42	; 66
     a76:	99 f0       	breq	.+38     	; 0xa9e <PWM_setDuty+0x4a>
     a78:	08 95       	ret
     a7a:	62 36       	cpi	r22, 0x62	; 98
     a7c:	a9 f0       	breq	.+42     	; 0xaa8 <PWM_setDuty+0x54>
     a7e:	63 36       	cpi	r22, 0x63	; 99
     a80:	e9 f0       	breq	.+58     	; 0xabc <PWM_setDuty+0x68>
     a82:	61 36       	cpi	r22, 0x61	; 97
     a84:	09 f0       	breq	.+2      	; 0xa88 <PWM_setDuty+0x34>
     a86:	4e c0       	rjmp	.+156    	; 0xb24 <PWM_setDuty+0xd0>
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <PWM_setDuty+0x40>
				case ('A') :
					TIMER1_setDuty(TIMER1_CH_A, stepValue);
     a8a:	64 2f       	mov	r22, r20
     a8c:	75 2f       	mov	r23, r21
     a8e:	81 e4       	ldi	r24, 0x41	; 65
     a90:	58 c2       	rjmp	.+1200   	; 0xf42 <TIMER1_setDuty>
				break;
     a92:	08 95       	ret
				
				case ('a') :
					TIMER1_setDuty(TIMER1_CH_A, stepValue);
     a94:	64 2f       	mov	r22, r20
     a96:	75 2f       	mov	r23, r21
     a98:	81 e4       	ldi	r24, 0x41	; 65
     a9a:	53 c2       	rjmp	.+1190   	; 0xf42 <TIMER1_setDuty>
				break;
     a9c:	08 95       	ret
				
				case ('B') :
					TIMER1_setDuty(TIMER1_CH_B, stepValue);
     a9e:	64 2f       	mov	r22, r20
     aa0:	75 2f       	mov	r23, r21
     aa2:	82 e4       	ldi	r24, 0x42	; 66
     aa4:	4e c2       	rjmp	.+1180   	; 0xf42 <TIMER1_setDuty>
				break;
				
				case ('b') :
					TIMER1_setDuty(TIMER1_CH_B, stepValue);
     aa6:	08 95       	ret
     aa8:	64 2f       	mov	r22, r20
     aaa:	75 2f       	mov	r23, r21
     aac:	82 e4       	ldi	r24, 0x42	; 66
				break;
     aae:	49 c2       	rjmp	.+1170   	; 0xf42 <TIMER1_setDuty>
				
				case ('C') :
					TIMER1_setDuty(TIMER1_CH_C, stepValue);
     ab0:	08 95       	ret
     ab2:	64 2f       	mov	r22, r20
     ab4:	75 2f       	mov	r23, r21
     ab6:	83 e4       	ldi	r24, 0x43	; 67
				break;
     ab8:	44 c2       	rjmp	.+1160   	; 0xf42 <TIMER1_setDuty>
				
				case ('c') :
					TIMER1_setDuty(TIMER1_CH_C, stepValue);
     aba:	08 95       	ret
     abc:	64 2f       	mov	r22, r20
     abe:	75 2f       	mov	r23, r21
     ac0:	83 e4       	ldi	r24, 0x43	; 67
				break;
     ac2:	3f c2       	rjmp	.+1150   	; 0xf42 <TIMER1_setDuty>
			}
		break;
		
		case (TIMER_2) :
			TIMER2_setDuty(stepValue);
     ac4:	08 95       	ret
     ac6:	84 2f       	mov	r24, r20
     ac8:	d0 c2       	rjmp	.+1440   	; 0x106a <TIMER2_setDuty>
		break;
     aca:	08 95       	ret
		
		case (TIMER_3) :
			switch (channel) {
     acc:	63 34       	cpi	r22, 0x43	; 67
     ace:	09 f1       	breq	.+66     	; 0xb12 <PWM_setDuty+0xbe>
     ad0:	28 f4       	brcc	.+10     	; 0xadc <PWM_setDuty+0x88>
     ad2:	61 34       	cpi	r22, 0x41	; 65
     ad4:	51 f0       	breq	.+20     	; 0xaea <PWM_setDuty+0x96>
     ad6:	62 34       	cpi	r22, 0x42	; 66
     ad8:	91 f0       	breq	.+36     	; 0xafe <PWM_setDuty+0xaa>
     ada:	08 95       	ret
     adc:	62 36       	cpi	r22, 0x62	; 98
     ade:	a1 f0       	breq	.+40     	; 0xb08 <PWM_setDuty+0xb4>
     ae0:	63 36       	cpi	r22, 0x63	; 99
     ae2:	e1 f0       	breq	.+56     	; 0xb1c <PWM_setDuty+0xc8>
     ae4:	61 36       	cpi	r22, 0x61	; 97
     ae6:	f1 f4       	brne	.+60     	; 0xb24 <PWM_setDuty+0xd0>
				case ('A') :
					TIMER3_setDuty(TIMER3_CH_A, stepValue);
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <PWM_setDuty+0xa0>
     aea:	64 2f       	mov	r22, r20
     aec:	75 2f       	mov	r23, r21
     aee:	81 e4       	ldi	r24, 0x41	; 65
				break;
				
				case ('a') :
					TIMER3_setDuty(TIMER3_CH_A, stepValue);
     af0:	54 c4       	rjmp	.+2216   	; 0x139a <TIMER3_setDuty>
     af2:	08 95       	ret
     af4:	64 2f       	mov	r22, r20
     af6:	75 2f       	mov	r23, r21
				break;
     af8:	81 e4       	ldi	r24, 0x41	; 65
				
				case ('B') :
					TIMER3_setDuty(TIMER3_CH_B, stepValue);
     afa:	4f c4       	rjmp	.+2206   	; 0x139a <TIMER3_setDuty>
     afc:	08 95       	ret
     afe:	64 2f       	mov	r22, r20
     b00:	75 2f       	mov	r23, r21
				break;
     b02:	82 e4       	ldi	r24, 0x42	; 66
				
				case ('b') :
					TIMER3_setDuty(TIMER3_CH_B, stepValue);
     b04:	4a c4       	rjmp	.+2196   	; 0x139a <TIMER3_setDuty>
     b06:	08 95       	ret
     b08:	64 2f       	mov	r22, r20
     b0a:	75 2f       	mov	r23, r21
				break;
     b0c:	82 e4       	ldi	r24, 0x42	; 66
				
				case ('C') :
					TIMER3_setDuty(TIMER3_CH_C, stepValue);
     b0e:	45 c4       	rjmp	.+2186   	; 0x139a <TIMER3_setDuty>
     b10:	08 95       	ret
     b12:	64 2f       	mov	r22, r20
     b14:	75 2f       	mov	r23, r21
     b16:	83 e4       	ldi	r24, 0x43	; 67
				break;
     b18:	40 c4       	rjmp	.+2176   	; 0x139a <TIMER3_setDuty>
				
				case ('c') :
					TIMER3_setDuty(TIMER3_CH_C, stepValue);
     b1a:	08 95       	ret
     b1c:	64 2f       	mov	r22, r20
     b1e:	75 2f       	mov	r23, r21
     b20:	83 e4       	ldi	r24, 0x43	; 67
     b22:	3b c4       	rjmp	.+2166   	; 0x139a <TIMER3_setDuty>
     b24:	08 95       	ret

00000b26 <SG90_init>:
 *  Author: Lee JaePyeong
 */ 

#include "sg90.h"

void SG90_init (SERVO* servo, uint8_t timerNumber, char channel){
     b26:	fc 01       	movw	r30, r24
     b28:	86 2f       	mov	r24, r22
     b2a:	64 2f       	mov	r22, r20
	servo->timerNumber = timerNumber;
     b2c:	80 83       	st	Z, r24
	servo->timerChannel = channel;
     b2e:	41 83       	std	Z+1, r20	; 0x01
	PWM_init(timerNumber, channel, SERVO_PWM_FREQ);
     b30:	42 e3       	ldi	r20, 0x32	; 50
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	13 cf       	rjmp	.-474    	; 0x95c <PWM_init>
     b36:	08 95       	ret

00000b38 <SG90_angle2Step>:
	PWM_setDuty(servo->timerNumber, servo->timerChannel, SG90_angle2Step(servo, angle));
}

uint16_t SG90_angle2Step(SERVO* servo, uint8_t angle){
// 	0 <= angle <= 180, where angle is integer
	servo->dutyStep = (uint16_t)(angle*SERVO_UNIT_STEP + SERVO_STEP_MIN);
     b38:	26 e1       	ldi	r18, 0x16	; 22
     b3a:	62 9f       	mul	r22, r18
     b3c:	b0 01       	movw	r22, r0
     b3e:	11 24       	eor	r1, r1
     b40:	68 51       	subi	r22, 0x18	; 24
     b42:	7c 4f       	sbci	r23, 0xFC	; 252
     b44:	fc 01       	movw	r30, r24
     b46:	73 83       	std	Z+3, r23	; 0x03
     b48:	62 83       	std	Z+2, r22	; 0x02
	return servo->dutyStep;
}
     b4a:	cb 01       	movw	r24, r22
     b4c:	08 95       	ret

00000b4e <SG90_setAngle>:
	servo->timerNumber = timerNumber;
	servo->timerChannel = channel;
	PWM_init(timerNumber, channel, SERVO_PWM_FREQ);
}

void SG90_setAngle (SERVO* servo, uint8_t angle){
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
	servo->angle = angle;
     b54:	6c 83       	std	Y+4, r22	; 0x04
	PWM_setDuty(servo->timerNumber, servo->timerChannel, SG90_angle2Step(servo, angle));
     b56:	f0 df       	rcall	.-32     	; 0xb38 <SG90_angle2Step>
     b58:	ac 01       	movw	r20, r24
     b5a:	69 81       	ldd	r22, Y+1	; 0x01
     b5c:	88 81       	ld	r24, Y
     b5e:	7a df       	rcall	.-268    	; 0xa54 <PWM_setDuty>
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <TIMER0_ISR_OVF_tick1ms>:
}

// Return Milli Seconds
uint32_t TIMER0_millis (){
	return TIMER0_tickCount1ms;
}
     b66:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TIMER0_tickCount1ms>
     b6a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TIMER0_tickCount1ms+0x1>
     b6e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <TIMER0_tickCount1ms+0x2>
     b72:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <TIMER0_tickCount1ms+0x3>
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	8f 4f       	sbci	r24, 0xFF	; 255
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <TIMER0_tickCount1ms>
     b86:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <TIMER0_tickCount1ms+0x1>
     b8a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TIMER0_tickCount1ms+0x2>
     b8e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <TIMER0_tickCount1ms+0x3>
     b92:	28 ee       	ldi	r18, 0xE8	; 232
     b94:	33 e0       	ldi	r19, 0x03	; 3
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	62 d6       	rcall	.+3268   	; 0x1860 <__udivmodsi4>
     b9c:	67 2b       	or	r22, r23
     b9e:	68 2b       	or	r22, r24
     ba0:	69 2b       	or	r22, r25
     ba2:	49 f4       	brne	.+18     	; 0xbb6 <TIMER0_ISR_OVF_tick1ms+0x50>
     ba4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     ba8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     bb2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     bb6:	87 e0       	ldi	r24, 0x07	; 7
     bb8:	82 bf       	out	0x32, r24	; 50
     bba:	08 95       	ret

00000bbc <TIMER0_setWaveGenerationMode>:
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <TIMER0_setWaveGenerationMode+0x16>
     bc0:	28 f0       	brcs	.+10     	; 0xbcc <TIMER0_setWaveGenerationMode+0x10>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	51 f0       	breq	.+20     	; 0xbda <TIMER0_setWaveGenerationMode+0x1e>
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <TIMER0_setWaveGenerationMode+0x26>
     bca:	08 95       	ret
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	83 bf       	out	0x33, r24	; 51
     bd0:	08 95       	ret
     bd2:	83 b7       	in	r24, 0x33	; 51
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	83 bf       	out	0x33, r24	; 51
     bd8:	08 95       	ret
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	83 bf       	out	0x33, r24	; 51
     be0:	08 95       	ret
     be2:	83 b7       	in	r24, 0x33	; 51
     be4:	88 64       	ori	r24, 0x48	; 72
     be6:	83 bf       	out	0x33, r24	; 51
     be8:	08 95       	ret

00000bea <TIMER0_setCompareOutputMode>:
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	49 f0       	breq	.+18     	; 0xc00 <TIMER0_setCompareOutputMode+0x16>
     bee:	28 f0       	brcs	.+10     	; 0xbfa <TIMER0_setCompareOutputMode+0x10>
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	51 f0       	breq	.+20     	; 0xc08 <TIMER0_setCompareOutputMode+0x1e>
     bf4:	83 30       	cpi	r24, 0x03	; 3
     bf6:	61 f0       	breq	.+24     	; 0xc10 <TIMER0_setCompareOutputMode+0x26>
     bf8:	08 95       	ret
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	83 bf       	out	0x33, r24	; 51
     bfe:	08 95       	ret
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	80 61       	ori	r24, 0x10	; 16
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	08 95       	ret
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	08 95       	ret
     c10:	83 b7       	in	r24, 0x33	; 51
     c12:	80 63       	ori	r24, 0x30	; 48
     c14:	83 bf       	out	0x33, r24	; 51
     c16:	08 95       	ret

00000c18 <TIMER0_setClockMode>:
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	88 30       	cpi	r24, 0x08	; 8
     c1c:	91 05       	cpc	r25, r1
     c1e:	10 f5       	brcc	.+68     	; 0xc64 <TIMER0_setClockMode+0x4c>
     c20:	fc 01       	movw	r30, r24
     c22:	ea 5b       	subi	r30, 0xBA	; 186
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	3e c6       	rjmp	.+3196   	; 0x18a4 <__tablejump2__>
     c28:	83 b7       	in	r24, 0x33	; 51
     c2a:	83 bf       	out	0x33, r24	; 51
     c2c:	08 95       	ret
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	83 bf       	out	0x33, r24	; 51
     c34:	08 95       	ret
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	08 95       	ret
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	83 60       	ori	r24, 0x03	; 3
     c42:	83 bf       	out	0x33, r24	; 51
     c44:	08 95       	ret
     c46:	83 b7       	in	r24, 0x33	; 51
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	83 bf       	out	0x33, r24	; 51
     c4c:	08 95       	ret
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	85 60       	ori	r24, 0x05	; 5
     c52:	83 bf       	out	0x33, r24	; 51
     c54:	08 95       	ret
     c56:	83 b7       	in	r24, 0x33	; 51
     c58:	86 60       	ori	r24, 0x06	; 6
     c5a:	83 bf       	out	0x33, r24	; 51
     c5c:	08 95       	ret
     c5e:	83 b7       	in	r24, 0x33	; 51
     c60:	87 60       	ori	r24, 0x07	; 7
     c62:	83 bf       	out	0x33, r24	; 51
     c64:	08 95       	ret

00000c66 <TIMER0_setPwm>:
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	a9 df       	rcall	.-174    	; 0xbbc <TIMER0_setWaveGenerationMode>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	be df       	rcall	.-132    	; 0xbea <TIMER0_setCompareOutputMode>
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	d3 cf       	rjmp	.-90     	; 0xc18 <TIMER0_setClockMode>
     c72:	08 95       	ret

00000c74 <TIMER0_enableOverflowInterrupt>:
     c74:	87 b7       	in	r24, 0x37	; 55
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	87 bf       	out	0x37, r24	; 55
     c7a:	08 95       	ret

00000c7c <TIMER0_enableTick1ms>:
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	9e df       	rcall	.-196    	; 0xbbc <TIMER0_setWaveGenerationMode>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	b3 df       	rcall	.-154    	; 0xbea <TIMER0_setCompareOutputMode>
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	c8 df       	rcall	.-112    	; 0xc18 <TIMER0_setClockMode>
     c88:	f5 cf       	rjmp	.-22     	; 0xc74 <TIMER0_enableOverflowInterrupt>
     c8a:	08 95       	ret

00000c8c <TIMER0_init>:
     c8c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TIMER0_tickCount1ms>
     c90:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TIMER0_tickCount1ms+0x1>
     c94:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TIMER0_tickCount1ms+0x2>
     c98:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TIMER0_tickCount1ms+0x3>
     c9c:	87 b3       	in	r24, 0x17	; 23
     c9e:	80 61       	ori	r24, 0x10	; 16
     ca0:	87 bb       	out	0x17, r24	; 23
     ca2:	88 b3       	in	r24, 0x18	; 24
     ca4:	8f 7e       	andi	r24, 0xEF	; 239
     ca6:	88 bb       	out	0x18, r24	; 24
     ca8:	e9 df       	rcall	.-46     	; 0xc7c <TIMER0_enableTick1ms>
     caa:	78 94       	sei
     cac:	08 95       	ret

00000cae <TIMER0_disableOverflowInterrupt>:
     cae:	87 b7       	in	r24, 0x37	; 55
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	87 bf       	out	0x37, r24	; 55
     cb4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TIMER0_tickCount1ms>
     cb8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TIMER0_tickCount1ms+0x1>
     cbc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TIMER0_tickCount1ms+0x2>
     cc0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TIMER0_tickCount1ms+0x3>
     cc4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
     cc8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
     ccc:	08 95       	ret

00000cce <TIMER0_setOutputCompareReg>:
     cce:	81 bf       	out	0x31, r24	; 49
     cd0:	08 95       	ret

00000cd2 <TIMER0_setDuty>:
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <TIMER0_setOutputCompareReg>
     cd4:	08 95       	ret

00000cd6 <TIMER0_seconds>:

uint16_t TIMER0_seconds (){
	return TIMER0_secondPassed;
     cd6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     cda:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     cde:	08 95       	ret

00000ce0 <TIMER1_init>:
}

// Timer/Counter Register Set
void TIMER1_setTimerCounterReg (uint16_t count){
// 	cli();
	TCNT1 = count;
     ce0:	47 b3       	in	r20, 0x17	; 23
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	b9 01       	movw	r22, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <TIMER1_init+0xe>
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	8a 95       	dec	r24
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <TIMER1_init+0xa>
     cf2:	cb 01       	movw	r24, r22
     cf4:	46 2b       	or	r20, r22
     cf6:	47 bb       	out	0x17, r20	; 23
     cf8:	98 b3       	in	r25, 0x18	; 24
     cfa:	80 95       	com	r24
     cfc:	89 23       	and	r24, r25
     cfe:	88 bb       	out	0x18, r24	; 24
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	9f ef       	ldi	r25, 0xFF	; 255
     d04:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <maxDuty+0x1>
     d08:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <maxDuty>
     d0c:	78 94       	sei
     d0e:	08 95       	ret

00000d10 <TIMER1_getPWMFrequencyValue>:
     d10:	9c 01       	movw	r18, r24
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	74 e2       	ldi	r23, 0x24	; 36
     d1a:	84 ef       	ldi	r24, 0xF4	; 244
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 d5       	rcall	.+2880   	; 0x1860 <__udivmodsi4>
     d20:	c9 01       	movw	r24, r18
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	08 95       	ret

00000d26 <TIMER1_setWaveGenerationMode>:
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	80 31       	cpi	r24, 0x10	; 16
     d2a:	91 05       	cpc	r25, r1
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <TIMER1_setWaveGenerationMode+0xa>
     d2e:	64 c0       	rjmp	.+200    	; 0xdf8 <TIMER1_setWaveGenerationMode+0xd2>
     d30:	fc 01       	movw	r30, r24
     d32:	e2 5b       	subi	r30, 0xB2	; 178
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	b6 c5       	rjmp	.+2924   	; 0x18a4 <__tablejump2__>
     d38:	8e b5       	in	r24, 0x2e	; 46
     d3a:	8e bd       	out	0x2e, r24	; 46
     d3c:	8f b5       	in	r24, 0x2f	; 47
     d3e:	8f bd       	out	0x2f, r24	; 47
     d40:	08 95       	ret
     d42:	8e b5       	in	r24, 0x2e	; 46
     d44:	8e bd       	out	0x2e, r24	; 46
     d46:	8f b5       	in	r24, 0x2f	; 47
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	8f bd       	out	0x2f, r24	; 47
     d4c:	08 95       	ret
     d4e:	8e b5       	in	r24, 0x2e	; 46
     d50:	8e bd       	out	0x2e, r24	; 46
     d52:	8f b5       	in	r24, 0x2f	; 47
     d54:	82 60       	ori	r24, 0x02	; 2
     d56:	8f bd       	out	0x2f, r24	; 47
     d58:	08 95       	ret
     d5a:	8e b5       	in	r24, 0x2e	; 46
     d5c:	8e bd       	out	0x2e, r24	; 46
     d5e:	8f b5       	in	r24, 0x2f	; 47
     d60:	83 60       	ori	r24, 0x03	; 3
     d62:	8f bd       	out	0x2f, r24	; 47
     d64:	08 95       	ret
     d66:	8e b5       	in	r24, 0x2e	; 46
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	8e bd       	out	0x2e, r24	; 46
     d6c:	8f b5       	in	r24, 0x2f	; 47
     d6e:	8f bd       	out	0x2f, r24	; 47
     d70:	08 95       	ret
     d72:	8e b5       	in	r24, 0x2e	; 46
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	8e bd       	out	0x2e, r24	; 46
     d78:	8f b5       	in	r24, 0x2f	; 47
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	8f bd       	out	0x2f, r24	; 47
     d7e:	08 95       	ret
     d80:	8e b5       	in	r24, 0x2e	; 46
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	8e bd       	out	0x2e, r24	; 46
     d86:	8f b5       	in	r24, 0x2f	; 47
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	8f bd       	out	0x2f, r24	; 47
     d8c:	08 95       	ret
     d8e:	8e b5       	in	r24, 0x2e	; 46
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	8e bd       	out	0x2e, r24	; 46
     d94:	8f b5       	in	r24, 0x2f	; 47
     d96:	83 60       	ori	r24, 0x03	; 3
     d98:	8f bd       	out	0x2f, r24	; 47
     d9a:	08 95       	ret
     d9c:	8e b5       	in	r24, 0x2e	; 46
     d9e:	80 61       	ori	r24, 0x10	; 16
     da0:	8e bd       	out	0x2e, r24	; 46
     da2:	8f b5       	in	r24, 0x2f	; 47
     da4:	8f bd       	out	0x2f, r24	; 47
     da6:	08 95       	ret
     da8:	8e b5       	in	r24, 0x2e	; 46
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	8e bd       	out	0x2e, r24	; 46
     dae:	8f b5       	in	r24, 0x2f	; 47
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	8f bd       	out	0x2f, r24	; 47
     db4:	08 95       	ret
     db6:	8e b5       	in	r24, 0x2e	; 46
     db8:	80 61       	ori	r24, 0x10	; 16
     dba:	8e bd       	out	0x2e, r24	; 46
     dbc:	8f b5       	in	r24, 0x2f	; 47
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	8f bd       	out	0x2f, r24	; 47
     dc2:	08 95       	ret
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	80 61       	ori	r24, 0x10	; 16
     dc8:	8e bd       	out	0x2e, r24	; 46
     dca:	8f b5       	in	r24, 0x2f	; 47
     dcc:	83 60       	ori	r24, 0x03	; 3
     dce:	8f bd       	out	0x2f, r24	; 47
     dd0:	08 95       	ret
     dd2:	8e b5       	in	r24, 0x2e	; 46
     dd4:	88 61       	ori	r24, 0x18	; 24
     dd6:	8e bd       	out	0x2e, r24	; 46
     dd8:	8f b5       	in	r24, 0x2f	; 47
     dda:	8f bd       	out	0x2f, r24	; 47
     ddc:	08 95       	ret
     dde:	8e b5       	in	r24, 0x2e	; 46
     de0:	88 61       	ori	r24, 0x18	; 24
     de2:	8e bd       	out	0x2e, r24	; 46
     de4:	8f b5       	in	r24, 0x2f	; 47
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	8f bd       	out	0x2f, r24	; 47
     dea:	08 95       	ret
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	88 61       	ori	r24, 0x18	; 24
     df0:	8e bd       	out	0x2e, r24	; 46
     df2:	8f b5       	in	r24, 0x2f	; 47
     df4:	83 60       	ori	r24, 0x03	; 3
     df6:	8f bd       	out	0x2f, r24	; 47
     df8:	08 95       	ret

00000dfa <TIMER1_setCompareOutputMode>:
     dfa:	81 34       	cpi	r24, 0x41	; 65
     dfc:	31 f0       	breq	.+12     	; 0xe0a <TIMER1_setCompareOutputMode+0x10>
     dfe:	82 34       	cpi	r24, 0x42	; 66
     e00:	11 f0       	breq	.+4      	; 0xe06 <TIMER1_setCompareOutputMode+0xc>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <TIMER1_setCompareOutputMode+0x12>
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <TIMER1_setCompareOutputMode+0x12>
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	61 30       	cpi	r22, 0x01	; 1
     e0e:	49 f0       	breq	.+18     	; 0xe22 <TIMER1_setCompareOutputMode+0x28>
     e10:	28 f0       	brcs	.+10     	; 0xe1c <TIMER1_setCompareOutputMode+0x22>
     e12:	62 30       	cpi	r22, 0x02	; 2
     e14:	a9 f0       	breq	.+42     	; 0xe40 <TIMER1_setCompareOutputMode+0x46>
     e16:	63 30       	cpi	r22, 0x03	; 3
     e18:	11 f1       	breq	.+68     	; 0xe5e <TIMER1_setCompareOutputMode+0x64>
     e1a:	08 95       	ret
     e1c:	8f b5       	in	r24, 0x2f	; 47
     e1e:	8f bd       	out	0x2f, r24	; 47
     e20:	08 95       	ret
     e22:	4f b5       	in	r20, 0x2f	; 47
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	b9 01       	movw	r22, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <TIMER1_setCompareOutputMode+0x3a>
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <TIMER1_setCompareOutputMode+0x36>
     e38:	cb 01       	movw	r24, r22
     e3a:	84 2b       	or	r24, r20
     e3c:	8f bd       	out	0x2f, r24	; 47
     e3e:	08 95       	ret
     e40:	4f b5       	in	r20, 0x2f	; 47
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	03 96       	adiw	r24, 0x03	; 3
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <TIMER1_setCompareOutputMode+0x58>
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	8a 95       	dec	r24
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <TIMER1_setCompareOutputMode+0x54>
     e56:	cf 01       	movw	r24, r30
     e58:	84 2b       	or	r24, r20
     e5a:	8f bd       	out	0x2f, r24	; 47
     e5c:	08 95       	ret
     e5e:	4f b5       	in	r20, 0x2f	; 47
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	bc 01       	movw	r22, r24
     e64:	6d 5f       	subi	r22, 0xFD	; 253
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <TIMER1_setCompareOutputMode+0x7a>
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	6a 95       	dec	r22
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <TIMER1_setCompareOutputMode+0x76>
     e78:	02 96       	adiw	r24, 0x02	; 2
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <TIMER1_setCompareOutputMode+0x86>
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	8a 95       	dec	r24
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <TIMER1_setCompareOutputMode+0x82>
     e84:	2e 2b       	or	r18, r30
     e86:	24 2b       	or	r18, r20
     e88:	2f bd       	out	0x2f, r18	; 47
     e8a:	08 95       	ret

00000e8c <TIMER1_setClockMode>:
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 30       	cpi	r24, 0x08	; 8
     e90:	91 05       	cpc	r25, r1
     e92:	10 f5       	brcc	.+68     	; 0xed8 <TIMER1_setClockMode+0x4c>
     e94:	fc 01       	movw	r30, r24
     e96:	e2 5a       	subi	r30, 0xA2	; 162
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	04 c5       	rjmp	.+2568   	; 0x18a4 <__tablejump2__>
     e9c:	8e b5       	in	r24, 0x2e	; 46
     e9e:	8e bd       	out	0x2e, r24	; 46
     ea0:	08 95       	ret
     ea2:	8e b5       	in	r24, 0x2e	; 46
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8e bd       	out	0x2e, r24	; 46
     ea8:	08 95       	ret
     eaa:	8e b5       	in	r24, 0x2e	; 46
     eac:	82 60       	ori	r24, 0x02	; 2
     eae:	8e bd       	out	0x2e, r24	; 46
     eb0:	08 95       	ret
     eb2:	8e b5       	in	r24, 0x2e	; 46
     eb4:	83 60       	ori	r24, 0x03	; 3
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	08 95       	ret
     eba:	8e b5       	in	r24, 0x2e	; 46
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	8e bd       	out	0x2e, r24	; 46
     ec0:	08 95       	ret
     ec2:	8e b5       	in	r24, 0x2e	; 46
     ec4:	85 60       	ori	r24, 0x05	; 5
     ec6:	8e bd       	out	0x2e, r24	; 46
     ec8:	08 95       	ret
     eca:	8e b5       	in	r24, 0x2e	; 46
     ecc:	86 60       	ori	r24, 0x06	; 6
     ece:	8e bd       	out	0x2e, r24	; 46
     ed0:	08 95       	ret
     ed2:	8e b5       	in	r24, 0x2e	; 46
     ed4:	87 60       	ori	r24, 0x07	; 7
     ed6:	8e bd       	out	0x2e, r24	; 46
     ed8:	08 95       	ret

00000eda <TIMER1_enableInputCaptureInterrupt>:
     eda:	81 b3       	in	r24, 0x11	; 17
     edc:	8f 7e       	andi	r24, 0xEF	; 239
     ede:	81 bb       	out	0x11, r24	; 17
     ee0:	82 b3       	in	r24, 0x12	; 18
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	82 bb       	out	0x12, r24	; 18
     ee6:	87 b7       	in	r24, 0x37	; 55
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	87 bf       	out	0x37, r24	; 55
     eec:	08 95       	ret

00000eee <TIMER1_setOutputCompareReg>:
     eee:	82 34       	cpi	r24, 0x42	; 66
     ef0:	39 f0       	breq	.+14     	; 0xf00 <TIMER1_setOutputCompareReg+0x12>
     ef2:	83 34       	cpi	r24, 0x43	; 67
     ef4:	41 f0       	breq	.+16     	; 0xf06 <TIMER1_setOutputCompareReg+0x18>
     ef6:	81 34       	cpi	r24, 0x41	; 65
     ef8:	51 f4       	brne	.+20     	; 0xf0e <TIMER1_setOutputCompareReg+0x20>
     efa:	7b bd       	out	0x2b, r23	; 43
     efc:	6a bd       	out	0x2a, r22	; 42
     efe:	08 95       	ret
     f00:	79 bd       	out	0x29, r23	; 41
     f02:	68 bd       	out	0x28, r22	; 40
     f04:	08 95       	ret
     f06:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f0a:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f0e:	08 95       	ret

00000f10 <TIMER1_setPwm>:
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	eb 01       	movw	r28, r22
     f16:	8f e0       	ldi	r24, 0x0F	; 15
     f18:	06 df       	rcall	.-500    	; 0xd26 <TIMER1_setWaveGenerationMode>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	b7 df       	rcall	.-146    	; 0xe8c <TIMER1_setClockMode>
     f1e:	ce 01       	movw	r24, r28
     f20:	f7 de       	rcall	.-530    	; 0xd10 <TIMER1_getPWMFrequencyValue>
     f22:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <maxDuty+0x1>
     f26:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <maxDuty>
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	82 e4       	ldi	r24, 0x42	; 66
     f2e:	65 df       	rcall	.-310    	; 0xdfa <TIMER1_setCompareOutputMode>
     f30:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <maxDuty>
     f34:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <maxDuty+0x1>
     f38:	81 e4       	ldi	r24, 0x41	; 65
     f3a:	d9 df       	rcall	.-78     	; 0xeee <TIMER1_setOutputCompareReg>
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <TIMER1_setDuty>:
     f42:	d5 cf       	rjmp	.-86     	; 0xeee <TIMER1_setOutputCompareReg>
     f44:	08 95       	ret

00000f46 <TIMER1_setInputCaptureNoiseCanceler>:
// 	sei();
}

// Input Capture Set
void TIMER1_setInputCaptureNoiseCanceler (){
	TCCR1B |= (1 << ICNC1);
     f46:	8e b5       	in	r24, 0x2e	; 46
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8e bd       	out	0x2e, r24	; 46
     f4c:	08 95       	ret

00000f4e <TIMER1_setInputCaptureEdge>:
}

void TIMER1_setInputCaptureEdge (uint8_t polarity){
	if (polarity == TIMER1_INPUT_CAPTURE_RISING_EDGE){
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	21 f4       	brne	.+8      	; 0xf5a <TIMER1_setInputCaptureEdge+0xc>
		TCCR1B |= (1 << ICES1);
     f52:	8e b5       	in	r24, 0x2e	; 46
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	8e bd       	out	0x2e, r24	; 46
     f58:	08 95       	ret
	}
	else if (polarity == TIMER1_INPUT_CAPTURE_FALLING_EDGE){
     f5a:	81 11       	cpse	r24, r1
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <TIMER1_setInputCaptureEdge+0x16>
		TCCR1B &= ~(1 << ICES1);
     f5e:	8e b5       	in	r24, 0x2e	; 46
     f60:	8f 7b       	andi	r24, 0xBF	; 191
     f62:	8e bd       	out	0x2e, r24	; 46
     f64:	08 95       	ret

00000f66 <TIMER2_init>:

// Disable Overflow Interrupt
void TIMER2_disableOverflowInterrupt (){
	TIMSK	&=	~(1 << TOIE2);
	TIMER2_tickCount1ms = 0;
	TIMER2_secondPassed = 0;
     f66:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TIMER2_tickCount1ms>
     f6a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TIMER2_tickCount1ms+0x1>
     f6e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TIMER2_tickCount1ms+0x2>
     f72:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TIMER2_tickCount1ms+0x3>
     f76:	87 b3       	in	r24, 0x17	; 23
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	87 bb       	out	0x17, r24	; 23
     f7c:	88 b3       	in	r24, 0x18	; 24
     f7e:	8f 77       	andi	r24, 0x7F	; 127
     f80:	88 bb       	out	0x18, r24	; 24
     f82:	78 94       	sei
     f84:	08 95       	ret

00000f86 <TIMER2_setWaveGenerationMode>:
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	49 f0       	breq	.+18     	; 0xf9c <TIMER2_setWaveGenerationMode+0x16>
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <TIMER2_setWaveGenerationMode+0x10>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	51 f0       	breq	.+20     	; 0xfa4 <TIMER2_setWaveGenerationMode+0x1e>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	61 f0       	breq	.+24     	; 0xfac <TIMER2_setWaveGenerationMode+0x26>
     f94:	08 95       	ret
     f96:	85 b5       	in	r24, 0x25	; 37
     f98:	85 bd       	out	0x25, r24	; 37
     f9a:	08 95       	ret
     f9c:	85 b5       	in	r24, 0x25	; 37
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	85 bd       	out	0x25, r24	; 37
     fa2:	08 95       	ret
     fa4:	85 b5       	in	r24, 0x25	; 37
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	85 bd       	out	0x25, r24	; 37
     faa:	08 95       	ret
     fac:	85 b5       	in	r24, 0x25	; 37
     fae:	88 64       	ori	r24, 0x48	; 72
     fb0:	85 bd       	out	0x25, r24	; 37
     fb2:	08 95       	ret

00000fb4 <TIMER2_setCompareOutputMode>:
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	49 f0       	breq	.+18     	; 0xfca <TIMER2_setCompareOutputMode+0x16>
     fb8:	28 f0       	brcs	.+10     	; 0xfc4 <TIMER2_setCompareOutputMode+0x10>
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	51 f0       	breq	.+20     	; 0xfd2 <TIMER2_setCompareOutputMode+0x1e>
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	61 f0       	breq	.+24     	; 0xfda <TIMER2_setCompareOutputMode+0x26>
     fc2:	08 95       	ret
     fc4:	85 b5       	in	r24, 0x25	; 37
     fc6:	85 bd       	out	0x25, r24	; 37
     fc8:	08 95       	ret
     fca:	85 b5       	in	r24, 0x25	; 37
     fcc:	80 61       	ori	r24, 0x10	; 16
     fce:	85 bd       	out	0x25, r24	; 37
     fd0:	08 95       	ret
     fd2:	85 b5       	in	r24, 0x25	; 37
     fd4:	80 62       	ori	r24, 0x20	; 32
     fd6:	85 bd       	out	0x25, r24	; 37
     fd8:	08 95       	ret
     fda:	85 b5       	in	r24, 0x25	; 37
     fdc:	80 63       	ori	r24, 0x30	; 48
     fde:	85 bd       	out	0x25, r24	; 37
     fe0:	08 95       	ret

00000fe2 <TIMER2_setClockMode>:
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	91 05       	cpc	r25, r1
     fe8:	10 f5       	brcc	.+68     	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
     fea:	fc 01       	movw	r30, r24
     fec:	ea 59       	subi	r30, 0x9A	; 154
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	59 c4       	rjmp	.+2226   	; 0x18a4 <__tablejump2__>
     ff2:	85 b5       	in	r24, 0x25	; 37
     ff4:	85 bd       	out	0x25, r24	; 37
     ff6:	08 95       	ret
     ff8:	85 b5       	in	r24, 0x25	; 37
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	85 bd       	out	0x25, r24	; 37
     ffe:	08 95       	ret
    1000:	85 b5       	in	r24, 0x25	; 37
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	85 bd       	out	0x25, r24	; 37
    1006:	08 95       	ret
    1008:	85 b5       	in	r24, 0x25	; 37
    100a:	83 60       	ori	r24, 0x03	; 3
    100c:	85 bd       	out	0x25, r24	; 37
    100e:	08 95       	ret
    1010:	85 b5       	in	r24, 0x25	; 37
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	85 bd       	out	0x25, r24	; 37
    1016:	08 95       	ret
    1018:	85 b5       	in	r24, 0x25	; 37
    101a:	85 60       	ori	r24, 0x05	; 5
    101c:	85 bd       	out	0x25, r24	; 37
    101e:	08 95       	ret
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	86 60       	ori	r24, 0x06	; 6
    1024:	85 bd       	out	0x25, r24	; 37
    1026:	08 95       	ret
    1028:	85 b5       	in	r24, 0x25	; 37
    102a:	87 60       	ori	r24, 0x07	; 7
    102c:	85 bd       	out	0x25, r24	; 37
    102e:	08 95       	ret

00001030 <TIMER2_setPwm>:
    1030:	83 e0       	ldi	r24, 0x03	; 3
    1032:	a9 df       	rcall	.-174    	; 0xf86 <TIMER2_setWaveGenerationMode>
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	be df       	rcall	.-132    	; 0xfb4 <TIMER2_setCompareOutputMode>
    1038:	84 e0       	ldi	r24, 0x04	; 4
    103a:	d3 cf       	rjmp	.-90     	; 0xfe2 <TIMER2_setClockMode>
    103c:	08 95       	ret

0000103e <TIMER2_enableOutputCompareInterrupt>:
    103e:	87 b7       	in	r24, 0x37	; 55
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	87 bf       	out	0x37, r24	; 55
    1044:	08 95       	ret

00001046 <TIMER2_disableOutputCompareInterrupt>:
    1046:	87 b7       	in	r24, 0x37	; 55
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	87 bf       	out	0x37, r24	; 55
    104c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TIMER2_tickCount1ms>
    1050:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TIMER2_tickCount1ms+0x1>
    1054:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TIMER2_tickCount1ms+0x2>
    1058:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TIMER2_tickCount1ms+0x3>
    105c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TIMER2_secondPassed+0x1>
    1060:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TIMER2_secondPassed>
    1064:	08 95       	ret

00001066 <TIMER2_setOutputCompareReg>:
}

// Output Compare Register Set
void TIMER2_setOutputCompareReg (uint8_t outputCompareThreshold){
	OCR2 = outputCompareThreshold;
    1066:	83 bd       	out	0x23, r24	; 35
    1068:	08 95       	ret

0000106a <TIMER2_setDuty>:
	// 	TIMER2_enableOutputCompareInterrupt	();
	// 	TIMER2_enableOverflowInterrupt		();
}

void TIMER2_setDuty (uint8_t stepValue){
	TIMER2_setOutputCompareReg(stepValue);
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <TIMER2_setOutputCompareReg>
    106c:	08 95       	ret

0000106e <TIMER3_init>:
void TIMER3_setPwm20Khz (uint8_t channel){
	TIMER3_setWaveGenerationMode	(TIMER3_WGM_MODE_F_PWM_ICR);
	TIMER3_setCompareOutputMode		(channel, TIMER3_COM_MODE_NON_INVERT);
	TIMER3_setClockMode				(TIMER3_CLOCK_SELECT_PRE_1);
	TIMER3_setInputCaptureReg		(TIMER3_F_PWM_20K_PRE1_ICR);
}
    106e:	42 b1       	in	r20, 0x02	; 2
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	b9 01       	movw	r22, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <TIMER3_init+0xe>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	8a 95       	dec	r24
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <TIMER3_init+0xa>
    1080:	cb 01       	movw	r24, r22
    1082:	46 2b       	or	r20, r22
    1084:	42 b9       	out	0x02, r20	; 2
    1086:	93 b1       	in	r25, 0x03	; 3
    1088:	80 95       	com	r24
    108a:	89 23       	and	r24, r25
    108c:	83 b9       	out	0x03, r24	; 3
    108e:	78 94       	sei
    1090:	08 95       	ret

00001092 <TIMER3_getPWMFrequencyValue>:
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	9c 01       	movw	r18, r24
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	74 e2       	ldi	r23, 0x24	; 36
    10a8:	84 ef       	ldi	r24, 0xF4	; 244
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	d9 d3       	rcall	.+1970   	; 0x1860 <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	08 95       	ret

000010b4 <TIMER3_setWaveGenerationMode>:
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	80 31       	cpi	r24, 0x10	; 16
    10b8:	91 05       	cpc	r25, r1
    10ba:	08 f0       	brcs	.+2      	; 0x10be <TIMER3_setWaveGenerationMode+0xa>
    10bc:	a0 c0       	rjmp	.+320    	; 0x11fe <__stack+0xff>
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 59       	subi	r30, 0x92	; 146
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	ef c3       	rjmp	.+2014   	; 0x18a4 <__tablejump2__>
    10c6:	ea e8       	ldi	r30, 0x8A	; 138
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 83       	st	Z, r24
    10ce:	eb e8       	ldi	r30, 0x8B	; 139
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 83       	st	Z, r24
    10d6:	08 95       	ret
    10d8:	ea e8       	ldi	r30, 0x8A	; 138
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 83       	st	Z, r24
    10e0:	eb e8       	ldi	r30, 0x8B	; 139
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	81 60       	ori	r24, 0x01	; 1
    10e8:	80 83       	st	Z, r24
    10ea:	08 95       	ret
    10ec:	ea e8       	ldi	r30, 0x8A	; 138
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 83       	st	Z, r24
    10f4:	eb e8       	ldi	r30, 0x8B	; 139
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret
    1100:	ea e8       	ldi	r30, 0x8A	; 138
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 83       	st	Z, r24
    1108:	eb e8       	ldi	r30, 0x8B	; 139
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	83 60       	ori	r24, 0x03	; 3
    1110:	80 83       	st	Z, r24
    1112:	08 95       	ret
    1114:	ea e8       	ldi	r30, 0x8A	; 138
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 60       	ori	r24, 0x08	; 8
    111c:	80 83       	st	Z, r24
    111e:	eb e8       	ldi	r30, 0x8B	; 139
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 83       	st	Z, r24
    1126:	08 95       	ret
    1128:	ea e8       	ldi	r30, 0x8A	; 138
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	88 60       	ori	r24, 0x08	; 8
    1130:	80 83       	st	Z, r24
    1132:	eb e8       	ldi	r30, 0x8B	; 139
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	80 83       	st	Z, r24
    113c:	08 95       	ret
    113e:	ea e8       	ldi	r30, 0x8A	; 138
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	80 83       	st	Z, r24
    1148:	eb e8       	ldi	r30, 0x8B	; 139
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	80 83       	st	Z, r24
    1152:	08 95       	ret
    1154:	ea e8       	ldi	r30, 0x8A	; 138
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 60       	ori	r24, 0x08	; 8
    115c:	80 83       	st	Z, r24
    115e:	eb e8       	ldi	r30, 0x8B	; 139
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	83 60       	ori	r24, 0x03	; 3
    1166:	80 83       	st	Z, r24
    1168:	08 95       	ret
    116a:	ea e8       	ldi	r30, 0x8A	; 138
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	80 83       	st	Z, r24
    1174:	eb e8       	ldi	r30, 0x8B	; 139
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 83       	st	Z, r24
    117c:	08 95       	ret
    117e:	ea e8       	ldi	r30, 0x8A	; 138
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 61       	ori	r24, 0x10	; 16
    1186:	80 83       	st	Z, r24
    1188:	eb e8       	ldi	r30, 0x8B	; 139
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	80 83       	st	Z, r24
    1192:	08 95       	ret
    1194:	ea e8       	ldi	r30, 0x8A	; 138
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	80 83       	st	Z, r24
    119e:	eb e8       	ldi	r30, 0x8B	; 139
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	82 60       	ori	r24, 0x02	; 2
    11a6:	80 83       	st	Z, r24
    11a8:	08 95       	ret
    11aa:	ea e8       	ldi	r30, 0x8A	; 138
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 61       	ori	r24, 0x10	; 16
    11b2:	80 83       	st	Z, r24
    11b4:	eb e8       	ldi	r30, 0x8B	; 139
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	83 60       	ori	r24, 0x03	; 3
    11bc:	80 83       	st	Z, r24
    11be:	08 95       	ret
    11c0:	ea e8       	ldi	r30, 0x8A	; 138
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 61       	ori	r24, 0x18	; 24
    11c8:	80 83       	st	Z, r24
    11ca:	eb e8       	ldi	r30, 0x8B	; 139
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 83       	st	Z, r24
    11d2:	08 95       	ret
    11d4:	ea e8       	ldi	r30, 0x8A	; 138
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 61       	ori	r24, 0x18	; 24
    11dc:	80 83       	st	Z, r24
    11de:	eb e8       	ldi	r30, 0x8B	; 139
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	80 83       	st	Z, r24
    11e8:	08 95       	ret
    11ea:	ea e8       	ldi	r30, 0x8A	; 138
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 61       	ori	r24, 0x18	; 24
    11f2:	80 83       	st	Z, r24
    11f4:	eb e8       	ldi	r30, 0x8B	; 139
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	83 60       	ori	r24, 0x03	; 3
    11fc:	80 83       	st	Z, r24
    11fe:	08 95       	ret

00001200 <TIMER3_setCompareOutputMode>:
    1200:	81 34       	cpi	r24, 0x41	; 65
    1202:	31 f0       	breq	.+12     	; 0x1210 <TIMER3_setCompareOutputMode+0x10>
    1204:	82 34       	cpi	r24, 0x42	; 66
    1206:	11 f0       	breq	.+4      	; 0x120c <TIMER3_setCompareOutputMode+0xc>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <TIMER3_setCompareOutputMode+0x12>
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <TIMER3_setCompareOutputMode+0x12>
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	61 30       	cpi	r22, 0x01	; 1
    1214:	59 f0       	breq	.+22     	; 0x122c <TIMER3_setCompareOutputMode+0x2c>
    1216:	28 f0       	brcs	.+10     	; 0x1222 <TIMER3_setCompareOutputMode+0x22>
    1218:	62 30       	cpi	r22, 0x02	; 2
    121a:	c9 f0       	breq	.+50     	; 0x124e <TIMER3_setCompareOutputMode+0x4e>
    121c:	63 30       	cpi	r22, 0x03	; 3
    121e:	41 f1       	breq	.+80     	; 0x1270 <TIMER3_setCompareOutputMode+0x70>
    1220:	08 95       	ret
    1222:	eb e8       	ldi	r30, 0x8B	; 139
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 83       	st	Z, r24
    122a:	08 95       	ret
    122c:	eb e8       	ldi	r30, 0x8B	; 139
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	40 81       	ld	r20, Z
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 96       	adiw	r24, 0x02	; 2
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	b9 01       	movw	r22, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <TIMER3_setCompareOutputMode+0x42>
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <TIMER3_setCompareOutputMode+0x3e>
    1246:	cb 01       	movw	r24, r22
    1248:	84 2b       	or	r24, r20
    124a:	80 83       	st	Z, r24
    124c:	08 95       	ret
    124e:	eb e8       	ldi	r30, 0x8B	; 139
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	40 81       	ld	r20, Z
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	03 96       	adiw	r24, 0x03	; 3
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	d9 01       	movw	r26, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <TIMER3_setCompareOutputMode+0x64>
    1260:	aa 0f       	add	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <TIMER3_setCompareOutputMode+0x60>
    1268:	cd 01       	movw	r24, r26
    126a:	84 2b       	or	r24, r20
    126c:	80 83       	st	Z, r24
    126e:	08 95       	ret
    1270:	eb e8       	ldi	r30, 0x8B	; 139
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	40 81       	ld	r20, Z
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	bc 01       	movw	r22, r24
    127a:	6d 5f       	subi	r22, 0xFD	; 253
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	d9 01       	movw	r26, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <TIMER3_setCompareOutputMode+0x8a>
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	6a 95       	dec	r22
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <TIMER3_setCompareOutputMode+0x86>
    128e:	02 96       	adiw	r24, 0x02	; 2
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <TIMER3_setCompareOutputMode+0x96>
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <TIMER3_setCompareOutputMode+0x92>
    129a:	2a 2b       	or	r18, r26
    129c:	24 2b       	or	r18, r20
    129e:	20 83       	st	Z, r18
    12a0:	08 95       	ret

000012a2 <TIMER3_setClockMode>:
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	91 05       	cpc	r25, r1
    12a8:	90 f5       	brcc	.+100    	; 0x130e <TIMER3_setClockMode+0x6c>
    12aa:	fc 01       	movw	r30, r24
    12ac:	e2 58       	subi	r30, 0x82	; 130
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	f9 c2       	rjmp	.+1522   	; 0x18a4 <__tablejump2__>
    12b2:	ea e8       	ldi	r30, 0x8A	; 138
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 83       	st	Z, r24
    12ba:	08 95       	ret
    12bc:	ea e8       	ldi	r30, 0x8A	; 138
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	80 83       	st	Z, r24
    12c6:	08 95       	ret
    12c8:	ea e8       	ldi	r30, 0x8A	; 138
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	80 83       	st	Z, r24
    12d2:	08 95       	ret
    12d4:	ea e8       	ldi	r30, 0x8A	; 138
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	83 60       	ori	r24, 0x03	; 3
    12dc:	80 83       	st	Z, r24
    12de:	08 95       	ret
    12e0:	ea e8       	ldi	r30, 0x8A	; 138
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	84 60       	ori	r24, 0x04	; 4
    12e8:	80 83       	st	Z, r24
    12ea:	08 95       	ret
    12ec:	ea e8       	ldi	r30, 0x8A	; 138
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	85 60       	ori	r24, 0x05	; 5
    12f4:	80 83       	st	Z, r24
    12f6:	08 95       	ret
    12f8:	ea e8       	ldi	r30, 0x8A	; 138
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	86 60       	ori	r24, 0x06	; 6
    1300:	80 83       	st	Z, r24
    1302:	08 95       	ret
    1304:	ea e8       	ldi	r30, 0x8A	; 138
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	87 60       	ori	r24, 0x07	; 7
    130c:	80 83       	st	Z, r24
    130e:	08 95       	ret

00001310 <TIMER3_enableOutputCompareInterrupt>:
    1310:	82 34       	cpi	r24, 0x42	; 66
    1312:	51 f0       	breq	.+20     	; 0x1328 <TIMER3_enableOutputCompareInterrupt+0x18>
    1314:	83 34       	cpi	r24, 0x43	; 67
    1316:	71 f0       	breq	.+28     	; 0x1334 <TIMER3_enableOutputCompareInterrupt+0x24>
    1318:	81 34       	cpi	r24, 0x41	; 65
    131a:	89 f4       	brne	.+34     	; 0x133e <TIMER3_enableOutputCompareInterrupt+0x2e>
    131c:	ed e7       	ldi	r30, 0x7D	; 125
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 61       	ori	r24, 0x10	; 16
    1324:	80 83       	st	Z, r24
    1326:	08 95       	ret
    1328:	ed e7       	ldi	r30, 0x7D	; 125
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	88 60       	ori	r24, 0x08	; 8
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret
    1334:	ed e7       	ldi	r30, 0x7D	; 125
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	80 83       	st	Z, r24
    133e:	08 95       	ret

00001340 <TIMER3_disableOutputCompareInterrupt>:
    1340:	82 34       	cpi	r24, 0x42	; 66
    1342:	51 f0       	breq	.+20     	; 0x1358 <TIMER3_disableOutputCompareInterrupt+0x18>
    1344:	83 34       	cpi	r24, 0x43	; 67
    1346:	71 f0       	breq	.+28     	; 0x1364 <TIMER3_disableOutputCompareInterrupt+0x24>
    1348:	81 34       	cpi	r24, 0x41	; 65
    134a:	89 f4       	brne	.+34     	; 0x136e <TIMER3_disableOutputCompareInterrupt+0x2e>
    134c:	ed e7       	ldi	r30, 0x7D	; 125
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	8f 7e       	andi	r24, 0xEF	; 239
    1354:	80 83       	st	Z, r24
    1356:	08 95       	ret
    1358:	ed e7       	ldi	r30, 0x7D	; 125
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	80 83       	st	Z, r24
    1362:	08 95       	ret
    1364:	ed e7       	ldi	r30, 0x7D	; 125
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8d 7f       	andi	r24, 0xFD	; 253
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret

00001370 <TIMER3_setOutputCompareReg>:
    1370:	82 34       	cpi	r24, 0x42	; 66
    1372:	49 f0       	breq	.+18     	; 0x1386 <TIMER3_setOutputCompareReg+0x16>
    1374:	83 34       	cpi	r24, 0x43	; 67
    1376:	61 f0       	breq	.+24     	; 0x1390 <TIMER3_setOutputCompareReg+0x20>
    1378:	81 34       	cpi	r24, 0x41	; 65
    137a:	71 f4       	brne	.+28     	; 0x1398 <TIMER3_setOutputCompareReg+0x28>
    137c:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1380:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1384:	08 95       	ret
    1386:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    138a:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    138e:	08 95       	ret
    1390:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1394:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1398:	08 95       	ret

0000139a <TIMER3_setDuty>:
    139a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <maxDuty>
    139e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <maxDuty+0x1>
    13a2:	62 17       	cp	r22, r18
    13a4:	73 07       	cpc	r23, r19
    13a6:	18 f0       	brcs	.+6      	; 0x13ae <TIMER3_setDuty+0x14>
    13a8:	b9 01       	movw	r22, r18
    13aa:	e2 cf       	rjmp	.-60     	; 0x1370 <TIMER3_setOutputCompareReg>
    13ac:	08 95       	ret
    13ae:	e0 cf       	rjmp	.-64     	; 0x1370 <TIMER3_setOutputCompareReg>
    13b0:	08 95       	ret

000013b2 <TIMER3_setInputCaptureReg>:
    13b2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    13b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13ba:	08 95       	ret

000013bc <TIMER3_setPwm>:

void TIMER3_setPwm (uint8_t channel, uint16_t frequency){
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	18 2f       	mov	r17, r24
    13c4:	eb 01       	movw	r28, r22
// 	TOP : ICR3 (FREQ, MAXSTEP)
//  TH : OCR3 (DUTY)
//  RESOL : log(TOP + 1)/log(2)
	TIMER3_setWaveGenerationMode	(TIMER3_WGM_MODE_F_PWM_ICR);
    13c6:	8e e0       	ldi	r24, 0x0E	; 14
    13c8:	75 de       	rcall	.-790    	; 0x10b4 <TIMER3_setWaveGenerationMode>
	TIMER3_setCompareOutputMode		(channel, TIMER3_COM_MODE_NON_INVERT);
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	81 2f       	mov	r24, r17
    13ce:	18 df       	rcall	.-464    	; 0x1200 <TIMER3_setCompareOutputMode>
// 	Prescaler selected as 8, maxDuty = 40,000 steps for getting 180steps = 11.11... within 5% ~ 10%
	TIMER3_setClockMode				(TIMER3_CLOCK_SELECT_PRE_8);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	67 df       	rcall	.-306    	; 0x12a2 <TIMER3_setClockMode>
	TIMER3_setInputCaptureReg		(TIMER3_getPWMFrequencyValue(frequency));
    13d4:	ce 01       	movw	r24, r28
    13d6:	5d de       	rcall	.-838    	; 0x1092 <TIMER3_getPWMFrequencyValue>
    13d8:	ec 01       	movw	r28, r24
    13da:	eb df       	rcall	.-42     	; 0x13b2 <TIMER3_setInputCaptureReg>
    13dc:	d0 93 0a 01 	sts	0x010A, r29	; 0x80010a <maxDuty+0x1>
	maxDuty = TIMER3_getPWMFrequencyValue(frequency);
    13e0:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <maxDuty>
    13e4:	df 91       	pop	r29
}
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	08 95       	ret

000013ec <UD_COMP_ISR>:
// ISR (TIMER3_COMPC_vect){
// 	UD_COMP_ISR();
// }

void UD_COMP_ISR (){
	if ((servoWiperCount++) % 10 == 0){
    13ec:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <servoWiperCount>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	82 0f       	add	r24, r18
    13f4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <servoWiperCount>
    13f8:	8d ec       	ldi	r24, 0xCD	; 205
    13fa:	28 9f       	mul	r18, r24
    13fc:	81 2d       	mov	r24, r1
    13fe:	11 24       	eor	r1, r1
    1400:	86 95       	lsr	r24
    1402:	86 95       	lsr	r24
    1404:	86 95       	lsr	r24
    1406:	88 0f       	add	r24, r24
    1408:	98 2f       	mov	r25, r24
    140a:	99 0f       	add	r25, r25
    140c:	99 0f       	add	r25, r25
    140e:	89 0f       	add	r24, r25
    1410:	28 13       	cpse	r18, r24
    1412:	25 c0       	rjmp	.+74     	; 0x145e <UD_COMP_ISR+0x72>
		if (servoWiperIncrease){
    1414:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <servoWiperIncrease>
    1418:	88 23       	and	r24, r24
    141a:	61 f0       	breq	.+24     	; 0x1434 <UD_COMP_ISR+0x48>
			servoWiperAngle++;
    141c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <servoWiperAngle>
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <servoWiperAngle>
			if (servoWiperAngle >= SERVO_WIPER_ANGLE_MAX){
    1426:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <servoWiperAngle>
    142a:	84 3b       	cpi	r24, 0xB4	; 180
    142c:	78 f0       	brcs	.+30     	; 0x144c <UD_COMP_ISR+0x60>
				servoWiperIncrease = false;
    142e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <servoWiperIncrease>
    1432:	0c c0       	rjmp	.+24     	; 0x144c <UD_COMP_ISR+0x60>
			}
		}
		else {
			servoWiperAngle--;
    1434:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <servoWiperAngle>
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <servoWiperAngle>
			if (servoWiperAngle <= SERVO_WIPER_ANGLE_MIN){
    143e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <servoWiperAngle>
    1442:	81 11       	cpse	r24, r1
    1444:	03 c0       	rjmp	.+6      	; 0x144c <UD_COMP_ISR+0x60>
				servoWiperIncrease = true;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <servoWiperIncrease>
			}
		}
		SG90_setAngle(PUDWiper, servoWiperAngle);
    144c:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <servoWiperAngle>
    1450:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <PUDWiper>
    1454:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <PUDWiper+0x1>
    1458:	7a db       	rcall	.-2316   	; 0xb4e <SG90_setAngle>
		servoWiperCount = 0;
    145a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <servoWiperCount>
    145e:	08 95       	ret

00001460 <UD_init>:
	}
}

void UD_init (){
// 	Varaible Initialize
	servoWiperAngle = 0;
    1460:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <servoWiperAngle>
	servoWiperCount = 0;
    1464:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <servoWiperCount>
	servoWiperIncrease = true;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <servoWiperIncrease>
	
// 	Wiper Servo Attach
	PUDWiper = &(UDWiper);
    146e:	83 e6       	ldi	r24, 0x63	; 99
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <PUDWiper+0x1>
    1476:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <PUDWiper>
	SG90_init(PUDWiper, TIMER_3, TIMER3_CH_B);
    147a:	42 e4       	ldi	r20, 0x42	; 66
    147c:	63 e0       	ldi	r22, 0x03	; 3
    147e:	53 db       	rcall	.-2394   	; 0xb26 <SG90_init>
	SG90_setAngle(PUDWiper, 90);
    1480:	6a e5       	ldi	r22, 0x5A	; 90
    1482:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <PUDWiper>
    1486:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <PUDWiper+0x1>
    148a:	61 db       	rcall	.-2366   	; 0xb4e <SG90_setAngle>
	
// 	Pointer Servo Attach
	PUDPointer = &(UDPointer);
    148c:	8a e4       	ldi	r24, 0x4A	; 74
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <PUDPointer+0x1>
    1494:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <PUDPointer>
	SG90_init(PUDPointer, TIMER_3, TIMER3_CH_A);
    1498:	41 e4       	ldi	r20, 0x41	; 65
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	44 db       	rcall	.-2424   	; 0xb26 <SG90_init>
	SG90_setAngle(PUDPointer, 90);
    149e:	6a e5       	ldi	r22, 0x5A	; 90
    14a0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <PUDPointer>
    14a4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <PUDPointer+0x1>
	
// 	Wiper Servo Control Timer Attach
// 	TIMER3_init(TIMER3_CH_C_PORT);
	TIMER3_enableOutputCompareInterrupt(TIMER3_CH_C);
    14a8:	52 db       	rcall	.-2396   	; 0xb4e <SG90_setAngle>
    14aa:	83 e4       	ldi	r24, 0x43	; 67
	TIMER3_setCompareOutputMode(TIMER3_CH_C, TIMER3_COM_MODE_NORMAL);
    14ac:	31 df       	rcall	.-414    	; 0x1310 <TIMER3_enableOutputCompareInterrupt>
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	83 e4       	ldi	r24, 0x43	; 67
	TIMER3_setWaveGenerationMode(TIMER3_WGM_MODE_NORMAL);
    14b2:	a6 de       	rcall	.-692    	; 0x1200 <TIMER3_setCompareOutputMode>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
	TIMER3_setOutputCompareReg(TIMER3_CH_C, 3000);
    14b6:	fe dd       	rcall	.-1028   	; 0x10b4 <TIMER3_setWaveGenerationMode>
    14b8:	68 eb       	ldi	r22, 0xB8	; 184
    14ba:	7b e0       	ldi	r23, 0x0B	; 11
    14bc:	83 e4       	ldi	r24, 0x43	; 67
    14be:	58 df       	rcall	.-336    	; 0x1370 <TIMER3_setOutputCompareReg>
	
// 	Detecting Ultrasonic Attach
	ULTRA_init();
    14c0:	18 c0       	rjmp	.+48     	; 0x14f2 <ULTRA_init>
    14c2:	08 95       	ret

000014c4 <UD_pointServoHead>:
    14c4:	44 cb       	rjmp	.-2424   	; 0xb4e <SG90_setAngle>
		TIMER3_disableOutputCompareInterrupt(TIMER3_CH_C);
	}
}

void UD_pointServoHead(SERVO* servo, uint8_t pointingAngle){
	SG90_setAngle(servo, pointingAngle);
    14c6:	08 95       	ret

000014c8 <UD_getWiperAngle>:
}

uint8_t UD_getWiperAngle(){
	return servoWiperAngle;
    14c8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <servoWiperAngle>
    14cc:	08 95       	ret

000014ce <UD_Execute>:
// 	Detecting Ultrasonic Attach
	ULTRA_init();
}

void UD_Execute(bool systemOff){
	if (!systemOff){
    14ce:	81 11       	cpse	r24, r1
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <UD_Execute+0x1e>
		TIMER3_enableOutputCompareInterrupt(TIMER3_CH_C);
    14d2:	83 e4       	ldi	r24, 0x43	; 67
    14d4:	1d df       	rcall	.-454    	; 0x1310 <TIMER3_enableOutputCompareInterrupt>
		if (ULTRA_EXE_getDistance () <= ULTRA_DETECT_TH_CM){
    14d6:	3d d0       	rcall	.+122    	; 0x1552 <ULTRA_EXE_getDistance>
    14d8:	06 97       	sbiw	r24, 0x06	; 6
    14da:	50 f4       	brcc	.+20     	; 0x14f0 <UD_Execute+0x22>
			UD_pointServoHead(PUDPointer, UD_getWiperAngle());
    14dc:	f5 df       	rcall	.-22     	; 0x14c8 <UD_getWiperAngle>
    14de:	68 2f       	mov	r22, r24
    14e0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <PUDPointer>
    14e4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <PUDPointer+0x1>
    14e8:	ed cf       	rjmp	.-38     	; 0x14c4 <UD_pointServoHead>
    14ea:	08 95       	ret
		}
	}
	else{
		TIMER3_disableOutputCompareInterrupt(TIMER3_CH_C);
    14ec:	83 e4       	ldi	r24, 0x43	; 67
    14ee:	28 cf       	rjmp	.-432    	; 0x1340 <TIMER3_disableOutputCompareInterrupt>
    14f0:	08 95       	ret

000014f2 <ULTRA_init>:
    14f2:	87 b3       	in	r24, 0x17	; 23
// Ultrasonic using Timer/Counter1 ICP1

// Initialize SR-04 Ultrasonic Sensor
void ULTRA_init (){
// 	Ultrasonic Init
	ULTRASONIC_TRIG_DDR		|=   (1 << ULTRASONIC_TRIG_PORT_NUM);
    14f4:	80 64       	ori	r24, 0x40	; 64
    14f6:	87 bb       	out	0x17, r24	; 23
	ULTRASONIC_TRIG_PORT	&=	~(1 << ULTRASONIC_TRIG_PORT_NUM);
    14f8:	88 b3       	in	r24, 0x18	; 24
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	88 bb       	out	0x18, r24	; 24
	ULTRASONIC_ECHO_DDR		&=	~(1 << ULTRASONIC_ECHO_PIN_NUM);
    14fe:	81 b3       	in	r24, 0x11	; 17
    1500:	8f 7e       	andi	r24, 0xEF	; 239
    1502:	81 bb       	out	0x11, r24	; 17
	
	ULTRA_distance		= 0;
    1504:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ULTRA_distance+0x1>
    1508:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <ULTRA_distance>
	ULTRA_startCount	= 0;
    150c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <ULTRA_startCount+0x1>
    1510:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ULTRA_startCount>
	ULTRA_endCount		= 0;
    1514:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <ULTRA_endCount+0x1>
    1518:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <ULTRA_endCount>
	tempCount			= 0;
    151c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <tempCount+0x1>
    1520:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <tempCount>
	
	TIMER1_init							(TIMER1_CH_B_PORT);
    1524:	86 e0       	ldi	r24, 0x06	; 6
    1526:	dc db       	rcall	.-2120   	; 0xce0 <TIMER1_init>
	TIMER1_setWaveGenerationMode		(TIMER1_WGM_MODE_F_PWM_OCR);
    1528:	8f e0       	ldi	r24, 0x0F	; 15
    152a:	fd db       	rcall	.-2054   	; 0xd26 <TIMER1_setWaveGenerationMode>
	TIMER1_setClockMode					(TIMER1_CLOCK_SELECT_PRE_64);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	ae dc       	rcall	.-1700   	; 0xe8c <TIMER1_setClockMode>
	TIMER1_setCompareOutputMode			(TIMER1_CH_B, TIMER1_COM_MODE_NON_INVERT);
    1530:	62 e0       	ldi	r22, 0x02	; 2
    1532:	82 e4       	ldi	r24, 0x42	; 66
    1534:	62 dc       	rcall	.-1852   	; 0xdfa <TIMER1_setCompareOutputMode>
	TIMER1_setOutputCompareReg			(TIMER1_CH_A, ULTRASONIC_TRIG_FULL_STEP);
    1536:	64 ed       	ldi	r22, 0xD4	; 212
    1538:	70 e3       	ldi	r23, 0x30	; 48
    153a:	81 e4       	ldi	r24, 0x41	; 65
    153c:	d8 dc       	rcall	.-1616   	; 0xeee <TIMER1_setOutputCompareReg>
	TIMER1_setOutputCompareReg			(TIMER1_CH_B, ULTRASONIC_TRIG_HIGH_STEP);
    153e:	62 e0       	ldi	r22, 0x02	; 2
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	82 e4       	ldi	r24, 0x42	; 66
	TIMER1_setInputCaptureNoiseCanceler	();
    1544:	d4 dc       	rcall	.-1624   	; 0xeee <TIMER1_setOutputCompareReg>
    1546:	ff dc       	rcall	.-1538   	; 0xf46 <TIMER1_setInputCaptureNoiseCanceler>
	TIMER1_setInputCaptureEdge			(TIMER1_INPUT_CAPTURE_RISING_EDGE);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	01 dd       	rcall	.-1534   	; 0xf4e <TIMER1_setInputCaptureEdge>
    154c:	c6 dc       	rcall	.-1652   	; 0xeda <TIMER1_enableInputCaptureInterrupt>
	TIMER1_enableInputCaptureInterrupt	();
    154e:	78 94       	sei
    1550:	08 95       	ret

00001552 <ULTRA_EXE_getDistance>:
	sei();
    1552:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <ULTRA_isDataCaptured>
}

uint16_t ULTRA_EXE_getDistance (){
// 	Flag check
	if (ULTRA_isDataCaptured){
    1556:	81 11       	cpse	r24, r1
// 		Clear flag
		ULTRA_isDataCaptured = 0;
    1558:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ULTRA_isDataCaptured>
	}
	return ULTRA_distance;
    155c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ULTRA_distance>
    1560:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <ULTRA_distance+0x1>
}
    1564:	08 95       	ret

00001566 <ULTRA_determineDistance>:

uint16_t ULTRA_determineDistance(){
	if (ULTRA_startCount < ULTRA_endCount) {
    1566:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <ULTRA_startCount>
    156a:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <ULTRA_startCount+0x1>
    156e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ULTRA_endCount>
    1572:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ULTRA_endCount+0x1>
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	78 f4       	brcc	.+30     	; 0x159a <ULTRA_determineDistance+0x34>
		tempCount = ULTRA_endCount - ULTRA_startCount;
    157c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ULTRA_endCount>
    1580:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ULTRA_endCount+0x1>
    1584:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <ULTRA_startCount>
    1588:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <ULTRA_startCount+0x1>
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <tempCount+0x1>
    1594:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <tempCount>
    1598:	10 c0       	rjmp	.+32     	; 0x15ba <ULTRA_determineDistance+0x54>
	}
	else{
		tempCount = ULTRA_endCount + (ULTRASONIC_TRIG_FULL_STEP - ULTRA_startCount);
    159a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ULTRA_endCount>
    159e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ULTRA_endCount+0x1>
    15a2:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <ULTRA_startCount>
    15a6:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <ULTRA_startCount+0x1>
    15aa:	82 1b       	sub	r24, r18
    15ac:	93 0b       	sbc	r25, r19
    15ae:	8c 52       	subi	r24, 0x2C	; 44
    15b0:	9f 4c       	sbci	r25, 0xCF	; 207
    15b2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <tempCount+0x1>
    15b6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <tempCount>
	}
// 	Distance[cm] = countValue[1] * 0.000004[s, Prescaler 4]	* 34000[cm/s] * 0.5 (Round)
	return (uint16_t)((double)(tempCount * 0.000004 * 34000 * 0.5));
    15ba:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <tempCount>
    15be:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <tempCount+0x1>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	5b d0       	rcall	.+182    	; 0x167e <__floatunsisf>
    15c8:	2d eb       	ldi	r18, 0xBD	; 189
    15ca:	37 e3       	ldi	r19, 0x37	; 55
    15cc:	46 e8       	ldi	r20, 0x86	; 134
    15ce:	56 e3       	ldi	r21, 0x36	; 54
    15d0:	bc d0       	rcall	.+376    	; 0x174a <__mulsf3>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 ed       	ldi	r19, 0xD0	; 208
    15d6:	44 e0       	ldi	r20, 0x04	; 4
    15d8:	57 e4       	ldi	r21, 0x47	; 71
    15da:	b7 d0       	rcall	.+366    	; 0x174a <__mulsf3>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	b2 d0       	rcall	.+356    	; 0x174a <__mulsf3>
    15e6:	1f d0       	rcall	.+62     	; 0x1626 <__fixunssfsi>
}
    15e8:	cb 01       	movw	r24, r22
    15ea:	08 95       	ret

000015ec <ULTRA_ISR_CAPT>:

void ULTRA_ISR_CAPT (){
// 	Posedge Trigger
	if (TCCR1B & (1 << ICES1)){
    15ec:	0e b4       	in	r0, 0x2e	; 46
    15ee:	06 fe       	sbrs	r0, 6
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <ULTRA_ISR_CAPT+0x18>
// 		Capture Data
		ULTRA_startCount = ICR1;
    15f2:	86 b5       	in	r24, 0x26	; 38
    15f4:	97 b5       	in	r25, 0x27	; 39
    15f6:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ULTRA_startCount+0x1>
    15fa:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ULTRA_startCount>
	
// 		Change Polarity
		TIMER1_setInputCaptureEdge(TIMER1_INPUT_CAPTURE_FALLING_EDGE);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	a6 cc       	rjmp	.-1716   	; 0xf4e <TIMER1_setInputCaptureEdge>
    1602:	08 95       	ret
	}
// 	Negedge Trigger
	else {
// 		Capture Data
		ULTRA_endCount = ICR1;
    1604:	86 b5       	in	r24, 0x26	; 38
    1606:	97 b5       	in	r25, 0x27	; 39
    1608:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <ULTRA_endCount+0x1>
    160c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <ULTRA_endCount>
		
// 		Change Polarity
		TIMER1_setInputCaptureEdge(TIMER1_INPUT_CAPTURE_RISING_EDGE);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	9d dc       	rcall	.-1734   	; 0xf4e <TIMER1_setInputCaptureEdge>
		
// 		Set Flag
		ULTRA_isDataCaptured = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ULTRA_isDataCaptured>
		
// 		Determine Distance
		ULTRA_distance = ULTRA_determineDistance();
    161a:	a5 df       	rcall	.-182    	; 0x1566 <ULTRA_determineDistance>
    161c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <ULTRA_distance+0x1>
    1620:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ULTRA_distance>
    1624:	08 95       	ret

00001626 <__fixunssfsi>:
    1626:	70 d0       	rcall	.+224    	; 0x1708 <__fp_splitA>
    1628:	88 f0       	brcs	.+34     	; 0x164c <__fixunssfsi+0x26>
    162a:	9f 57       	subi	r25, 0x7F	; 127
    162c:	90 f0       	brcs	.+36     	; 0x1652 <__fixunssfsi+0x2c>
    162e:	b9 2f       	mov	r27, r25
    1630:	99 27       	eor	r25, r25
    1632:	b7 51       	subi	r27, 0x17	; 23
    1634:	a0 f0       	brcs	.+40     	; 0x165e <__fixunssfsi+0x38>
    1636:	d1 f0       	breq	.+52     	; 0x166c <__fixunssfsi+0x46>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	88 1f       	adc	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	1a f0       	brmi	.+6      	; 0x1648 <__fixunssfsi+0x22>
    1642:	ba 95       	dec	r27
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__fixunssfsi+0x12>
    1646:	12 c0       	rjmp	.+36     	; 0x166c <__fixunssfsi+0x46>
    1648:	b1 30       	cpi	r27, 0x01	; 1
    164a:	81 f0       	breq	.+32     	; 0x166c <__fixunssfsi+0x46>
    164c:	77 d0       	rcall	.+238    	; 0x173c <__fp_zero>
    164e:	b1 e0       	ldi	r27, 0x01	; 1
    1650:	08 95       	ret
    1652:	74 c0       	rjmp	.+232    	; 0x173c <__fp_zero>
    1654:	67 2f       	mov	r22, r23
    1656:	78 2f       	mov	r23, r24
    1658:	88 27       	eor	r24, r24
    165a:	b8 5f       	subi	r27, 0xF8	; 248
    165c:	39 f0       	breq	.+14     	; 0x166c <__fixunssfsi+0x46>
    165e:	b9 3f       	cpi	r27, 0xF9	; 249
    1660:	cc f3       	brlt	.-14     	; 0x1654 <__fixunssfsi+0x2e>
    1662:	86 95       	lsr	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	b3 95       	inc	r27
    166a:	d9 f7       	brne	.-10     	; 0x1662 <__fixunssfsi+0x3c>
    166c:	3e f4       	brtc	.+14     	; 0x167c <__fixunssfsi+0x56>
    166e:	90 95       	com	r25
    1670:	80 95       	com	r24
    1672:	70 95       	com	r23
    1674:	61 95       	neg	r22
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	08 95       	ret

0000167e <__floatunsisf>:
    167e:	e8 94       	clt
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <__floatsisf+0x12>

00001682 <__floatsisf>:
    1682:	97 fb       	bst	r25, 7
    1684:	3e f4       	brtc	.+14     	; 0x1694 <__floatsisf+0x12>
    1686:	90 95       	com	r25
    1688:	80 95       	com	r24
    168a:	70 95       	com	r23
    168c:	61 95       	neg	r22
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	8f 4f       	sbci	r24, 0xFF	; 255
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	99 23       	and	r25, r25
    1696:	a9 f0       	breq	.+42     	; 0x16c2 <__floatsisf+0x40>
    1698:	f9 2f       	mov	r31, r25
    169a:	96 e9       	ldi	r25, 0x96	; 150
    169c:	bb 27       	eor	r27, r27
    169e:	93 95       	inc	r25
    16a0:	f6 95       	lsr	r31
    16a2:	87 95       	ror	r24
    16a4:	77 95       	ror	r23
    16a6:	67 95       	ror	r22
    16a8:	b7 95       	ror	r27
    16aa:	f1 11       	cpse	r31, r1
    16ac:	f8 cf       	rjmp	.-16     	; 0x169e <__floatsisf+0x1c>
    16ae:	fa f4       	brpl	.+62     	; 0x16ee <__floatsisf+0x6c>
    16b0:	bb 0f       	add	r27, r27
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <__floatsisf+0x36>
    16b4:	60 ff       	sbrs	r22, 0
    16b6:	1b c0       	rjmp	.+54     	; 0x16ee <__floatsisf+0x6c>
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	8f 4f       	sbci	r24, 0xFF	; 255
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <__floatsisf+0x6c>
    16c2:	88 23       	and	r24, r24
    16c4:	11 f0       	breq	.+4      	; 0x16ca <__floatsisf+0x48>
    16c6:	96 e9       	ldi	r25, 0x96	; 150
    16c8:	11 c0       	rjmp	.+34     	; 0x16ec <__floatsisf+0x6a>
    16ca:	77 23       	and	r23, r23
    16cc:	21 f0       	breq	.+8      	; 0x16d6 <__floatsisf+0x54>
    16ce:	9e e8       	ldi	r25, 0x8E	; 142
    16d0:	87 2f       	mov	r24, r23
    16d2:	76 2f       	mov	r23, r22
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <__floatsisf+0x5e>
    16d6:	66 23       	and	r22, r22
    16d8:	71 f0       	breq	.+28     	; 0x16f6 <__floatsisf+0x74>
    16da:	96 e8       	ldi	r25, 0x86	; 134
    16dc:	86 2f       	mov	r24, r22
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	2a f0       	brmi	.+10     	; 0x16ee <__floatsisf+0x6c>
    16e4:	9a 95       	dec	r25
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	da f7       	brpl	.-10     	; 0x16e4 <__floatsisf+0x62>
    16ee:	88 0f       	add	r24, r24
    16f0:	96 95       	lsr	r25
    16f2:	87 95       	ror	r24
    16f4:	97 f9       	bld	r25, 7
    16f6:	08 95       	ret

000016f8 <__fp_split3>:
    16f8:	57 fd       	sbrc	r21, 7
    16fa:	90 58       	subi	r25, 0x80	; 128
    16fc:	44 0f       	add	r20, r20
    16fe:	55 1f       	adc	r21, r21
    1700:	59 f0       	breq	.+22     	; 0x1718 <__fp_splitA+0x10>
    1702:	5f 3f       	cpi	r21, 0xFF	; 255
    1704:	71 f0       	breq	.+28     	; 0x1722 <__fp_splitA+0x1a>
    1706:	47 95       	ror	r20

00001708 <__fp_splitA>:
    1708:	88 0f       	add	r24, r24
    170a:	97 fb       	bst	r25, 7
    170c:	99 1f       	adc	r25, r25
    170e:	61 f0       	breq	.+24     	; 0x1728 <__fp_splitA+0x20>
    1710:	9f 3f       	cpi	r25, 0xFF	; 255
    1712:	79 f0       	breq	.+30     	; 0x1732 <__fp_splitA+0x2a>
    1714:	87 95       	ror	r24
    1716:	08 95       	ret
    1718:	12 16       	cp	r1, r18
    171a:	13 06       	cpc	r1, r19
    171c:	14 06       	cpc	r1, r20
    171e:	55 1f       	adc	r21, r21
    1720:	f2 cf       	rjmp	.-28     	; 0x1706 <__fp_split3+0xe>
    1722:	46 95       	lsr	r20
    1724:	f1 df       	rcall	.-30     	; 0x1708 <__fp_splitA>
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <__fp_splitA+0x30>
    1728:	16 16       	cp	r1, r22
    172a:	17 06       	cpc	r1, r23
    172c:	18 06       	cpc	r1, r24
    172e:	99 1f       	adc	r25, r25
    1730:	f1 cf       	rjmp	.-30     	; 0x1714 <__fp_splitA+0xc>
    1732:	86 95       	lsr	r24
    1734:	71 05       	cpc	r23, r1
    1736:	61 05       	cpc	r22, r1
    1738:	08 94       	sec
    173a:	08 95       	ret

0000173c <__fp_zero>:
    173c:	e8 94       	clt

0000173e <__fp_szero>:
    173e:	bb 27       	eor	r27, r27
    1740:	66 27       	eor	r22, r22
    1742:	77 27       	eor	r23, r23
    1744:	cb 01       	movw	r24, r22
    1746:	97 f9       	bld	r25, 7
    1748:	08 95       	ret

0000174a <__mulsf3>:
    174a:	0b d0       	rcall	.+22     	; 0x1762 <__mulsf3x>
    174c:	78 c0       	rjmp	.+240    	; 0x183e <__fp_round>
    174e:	69 d0       	rcall	.+210    	; 0x1822 <__fp_pscA>
    1750:	28 f0       	brcs	.+10     	; 0x175c <__mulsf3+0x12>
    1752:	6e d0       	rcall	.+220    	; 0x1830 <__fp_pscB>
    1754:	18 f0       	brcs	.+6      	; 0x175c <__mulsf3+0x12>
    1756:	95 23       	and	r25, r21
    1758:	09 f0       	breq	.+2      	; 0x175c <__mulsf3+0x12>
    175a:	5a c0       	rjmp	.+180    	; 0x1810 <__fp_inf>
    175c:	5f c0       	rjmp	.+190    	; 0x181c <__fp_nan>
    175e:	11 24       	eor	r1, r1
    1760:	ee cf       	rjmp	.-36     	; 0x173e <__fp_szero>

00001762 <__mulsf3x>:
    1762:	ca df       	rcall	.-108    	; 0x16f8 <__fp_split3>
    1764:	a0 f3       	brcs	.-24     	; 0x174e <__mulsf3+0x4>

00001766 <__mulsf3_pse>:
    1766:	95 9f       	mul	r25, r21
    1768:	d1 f3       	breq	.-12     	; 0x175e <__mulsf3+0x14>
    176a:	95 0f       	add	r25, r21
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	55 1f       	adc	r21, r21
    1770:	62 9f       	mul	r22, r18
    1772:	f0 01       	movw	r30, r0
    1774:	72 9f       	mul	r23, r18
    1776:	bb 27       	eor	r27, r27
    1778:	f0 0d       	add	r31, r0
    177a:	b1 1d       	adc	r27, r1
    177c:	63 9f       	mul	r22, r19
    177e:	aa 27       	eor	r26, r26
    1780:	f0 0d       	add	r31, r0
    1782:	b1 1d       	adc	r27, r1
    1784:	aa 1f       	adc	r26, r26
    1786:	64 9f       	mul	r22, r20
    1788:	66 27       	eor	r22, r22
    178a:	b0 0d       	add	r27, r0
    178c:	a1 1d       	adc	r26, r1
    178e:	66 1f       	adc	r22, r22
    1790:	82 9f       	mul	r24, r18
    1792:	22 27       	eor	r18, r18
    1794:	b0 0d       	add	r27, r0
    1796:	a1 1d       	adc	r26, r1
    1798:	62 1f       	adc	r22, r18
    179a:	73 9f       	mul	r23, r19
    179c:	b0 0d       	add	r27, r0
    179e:	a1 1d       	adc	r26, r1
    17a0:	62 1f       	adc	r22, r18
    17a2:	83 9f       	mul	r24, r19
    17a4:	a0 0d       	add	r26, r0
    17a6:	61 1d       	adc	r22, r1
    17a8:	22 1f       	adc	r18, r18
    17aa:	74 9f       	mul	r23, r20
    17ac:	33 27       	eor	r19, r19
    17ae:	a0 0d       	add	r26, r0
    17b0:	61 1d       	adc	r22, r1
    17b2:	23 1f       	adc	r18, r19
    17b4:	84 9f       	mul	r24, r20
    17b6:	60 0d       	add	r22, r0
    17b8:	21 1d       	adc	r18, r1
    17ba:	82 2f       	mov	r24, r18
    17bc:	76 2f       	mov	r23, r22
    17be:	6a 2f       	mov	r22, r26
    17c0:	11 24       	eor	r1, r1
    17c2:	9f 57       	subi	r25, 0x7F	; 127
    17c4:	50 40       	sbci	r21, 0x00	; 0
    17c6:	8a f0       	brmi	.+34     	; 0x17ea <__mulsf3_pse+0x84>
    17c8:	e1 f0       	breq	.+56     	; 0x1802 <__mulsf3_pse+0x9c>
    17ca:	88 23       	and	r24, r24
    17cc:	4a f0       	brmi	.+18     	; 0x17e0 <__mulsf3_pse+0x7a>
    17ce:	ee 0f       	add	r30, r30
    17d0:	ff 1f       	adc	r31, r31
    17d2:	bb 1f       	adc	r27, r27
    17d4:	66 1f       	adc	r22, r22
    17d6:	77 1f       	adc	r23, r23
    17d8:	88 1f       	adc	r24, r24
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	50 40       	sbci	r21, 0x00	; 0
    17de:	a9 f7       	brne	.-22     	; 0x17ca <__mulsf3_pse+0x64>
    17e0:	9e 3f       	cpi	r25, 0xFE	; 254
    17e2:	51 05       	cpc	r21, r1
    17e4:	70 f0       	brcs	.+28     	; 0x1802 <__mulsf3_pse+0x9c>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <__fp_inf>
    17e8:	aa cf       	rjmp	.-172    	; 0x173e <__fp_szero>
    17ea:	5f 3f       	cpi	r21, 0xFF	; 255
    17ec:	ec f3       	brlt	.-6      	; 0x17e8 <__mulsf3_pse+0x82>
    17ee:	98 3e       	cpi	r25, 0xE8	; 232
    17f0:	dc f3       	brlt	.-10     	; 0x17e8 <__mulsf3_pse+0x82>
    17f2:	86 95       	lsr	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	b7 95       	ror	r27
    17fa:	f7 95       	ror	r31
    17fc:	e7 95       	ror	r30
    17fe:	9f 5f       	subi	r25, 0xFF	; 255
    1800:	c1 f7       	brne	.-16     	; 0x17f2 <__mulsf3_pse+0x8c>
    1802:	fe 2b       	or	r31, r30
    1804:	88 0f       	add	r24, r24
    1806:	91 1d       	adc	r25, r1
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	97 f9       	bld	r25, 7
    180e:	08 95       	ret

00001810 <__fp_inf>:
    1810:	97 f9       	bld	r25, 7
    1812:	9f 67       	ori	r25, 0x7F	; 127
    1814:	80 e8       	ldi	r24, 0x80	; 128
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	08 95       	ret

0000181c <__fp_nan>:
    181c:	9f ef       	ldi	r25, 0xFF	; 255
    181e:	80 ec       	ldi	r24, 0xC0	; 192
    1820:	08 95       	ret

00001822 <__fp_pscA>:
    1822:	00 24       	eor	r0, r0
    1824:	0a 94       	dec	r0
    1826:	16 16       	cp	r1, r22
    1828:	17 06       	cpc	r1, r23
    182a:	18 06       	cpc	r1, r24
    182c:	09 06       	cpc	r0, r25
    182e:	08 95       	ret

00001830 <__fp_pscB>:
    1830:	00 24       	eor	r0, r0
    1832:	0a 94       	dec	r0
    1834:	12 16       	cp	r1, r18
    1836:	13 06       	cpc	r1, r19
    1838:	14 06       	cpc	r1, r20
    183a:	05 06       	cpc	r0, r21
    183c:	08 95       	ret

0000183e <__fp_round>:
    183e:	09 2e       	mov	r0, r25
    1840:	03 94       	inc	r0
    1842:	00 0c       	add	r0, r0
    1844:	11 f4       	brne	.+4      	; 0x184a <__fp_round+0xc>
    1846:	88 23       	and	r24, r24
    1848:	52 f0       	brmi	.+20     	; 0x185e <__fp_round+0x20>
    184a:	bb 0f       	add	r27, r27
    184c:	40 f4       	brcc	.+16     	; 0x185e <__fp_round+0x20>
    184e:	bf 2b       	or	r27, r31
    1850:	11 f4       	brne	.+4      	; 0x1856 <__fp_round+0x18>
    1852:	60 ff       	sbrs	r22, 0
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__fp_round+0x20>
    1856:	6f 5f       	subi	r22, 0xFF	; 255
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	08 95       	ret

00001860 <__udivmodsi4>:
    1860:	a1 e2       	ldi	r26, 0x21	; 33
    1862:	1a 2e       	mov	r1, r26
    1864:	aa 1b       	sub	r26, r26
    1866:	bb 1b       	sub	r27, r27
    1868:	fd 01       	movw	r30, r26
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <__udivmodsi4_ep>

0000186c <__udivmodsi4_loop>:
    186c:	aa 1f       	adc	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	ee 1f       	adc	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	a2 17       	cp	r26, r18
    1876:	b3 07       	cpc	r27, r19
    1878:	e4 07       	cpc	r30, r20
    187a:	f5 07       	cpc	r31, r21
    187c:	20 f0       	brcs	.+8      	; 0x1886 <__udivmodsi4_ep>
    187e:	a2 1b       	sub	r26, r18
    1880:	b3 0b       	sbc	r27, r19
    1882:	e4 0b       	sbc	r30, r20
    1884:	f5 0b       	sbc	r31, r21

00001886 <__udivmodsi4_ep>:
    1886:	66 1f       	adc	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	1a 94       	dec	r1
    1890:	69 f7       	brne	.-38     	; 0x186c <__udivmodsi4_loop>
    1892:	60 95       	com	r22
    1894:	70 95       	com	r23
    1896:	80 95       	com	r24
    1898:	90 95       	com	r25
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	bd 01       	movw	r22, r26
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret

000018a4 <__tablejump2__>:
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	00 24       	eor	r0, r0
    18aa:	00 1c       	adc	r0, r0
    18ac:	0b be       	out	0x3b, r0	; 59
    18ae:	07 90       	elpm	r0, Z+
    18b0:	f6 91       	elpm	r31, Z
    18b2:	e0 2d       	mov	r30, r0
    18b4:	09 94       	ijmp

000018b6 <__umulhisi3>:
    18b6:	a2 9f       	mul	r26, r18
    18b8:	b0 01       	movw	r22, r0
    18ba:	b3 9f       	mul	r27, r19
    18bc:	c0 01       	movw	r24, r0
    18be:	a3 9f       	mul	r26, r19
    18c0:	70 0d       	add	r23, r0
    18c2:	81 1d       	adc	r24, r1
    18c4:	11 24       	eor	r1, r1
    18c6:	91 1d       	adc	r25, r1
    18c8:	b2 9f       	mul	r27, r18
    18ca:	70 0d       	add	r23, r0
    18cc:	81 1d       	adc	r24, r1
    18ce:	11 24       	eor	r1, r1
    18d0:	91 1d       	adc	r25, r1
    18d2:	08 95       	ret

000018d4 <_exit>:
    18d4:	f8 94       	cli

000018d6 <__stop_program>:
    18d6:	ff cf       	rjmp	.-2      	; 0x18d6 <__stop_program>
